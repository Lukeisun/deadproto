// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steammessages.proto
// Protobuf C++ Version: 5.27.3

#include "steammessages.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CMsgProtoBufHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        target_job_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_steam_id_{::uint64_t{0u}},
        client_session_id_{0},
        source_app_id_{0u},
        gc_msg_src_{static_cast< ::GCProtoBufMsgSrc >(0)},
        job_id_source_{::uint64_t{18446744073709551615u}},
        job_id_target_{::uint64_t{18446744073709551615u}},
        eresult_{2},
        gc_dir_index_source_{-1} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgProtoBufHeader::CMsgProtoBufHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgProtoBufHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProtoBufHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProtoBufHeaderDefaultTypeInternal() {}
  union {
    CMsgProtoBufHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;

inline constexpr CIPLocationInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        country_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        city_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_{0u},
        latitude_{0},
        longitude_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CIPLocationInfo::CIPLocationInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CIPLocationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CIPLocationInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CIPLocationInfoDefaultTypeInternal() {}
  union {
    CIPLocationInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CIPLocationInfoDefaultTypeInternal _CIPLocationInfo_default_instance_;

inline constexpr CGCSystemMsg_GetAccountDetails_Response::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        persona_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        txn_country_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        is_cyber_cafe_{false},
        is_school_account_{false},
        is_limited_{false},
        is_subscribed_{false},
        is_profile_created_{false},
        is_profile_public_{false},
        is_inventory_public_{false},
        is_vac_banned_{false},
        package_{0u},
        free_trial_expiration_{0u},
        is_free_trial_account_{false},
        is_low_violence_{false},
        is_account_locked_down_{false},
        is_community_banned_{false},
        trade_ban_expiration_{0u},
        accountid_{0u},
        suspension_end_time_{0u},
        steam_level_{0u},
        friend_count_{0u},
        account_creation_time_{0u},
        is_trade_banned_{false},
        is_steamguard_enabled_{false},
        is_phone_verified_{false},
        is_two_factor_auth_enabled_{false},
        two_factor_enabled_time_{0u},
        phone_verification_time_{0u},
        phone_id_{::uint64_t{0u}},
        rt_identity_linked_{0u},
        rt_birth_date_{0u},
        is_phone_identifying_{false},
        has_accepted_china_ssa_{false},
        is_banned_steam_china_{false},
        eresult_deprecated_{2u} {}

template <typename>
PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails_Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_Response_default_instance_;

inline constexpr CGCSystemMsg_GetAccountDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        steamid_{::uint64_t{0u}},
        appid_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CGCSystemMsg_GetAccountDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCSystemMsg_GetAccountDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetailsDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCSystemMsg_GetAccountDetailsDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_default_instance_;

inline constexpr CGCMsgGetIPLocationResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : infos_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CGCMsgGetIPLocationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGCMsgGetIPLocationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGCMsgGetIPLocationResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetIPLocationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGCMsgGetIPLocationResponseDefaultTypeInternal _CGCMsgGetIPLocationResponse_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steammessages_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steammessages_2eproto = nullptr;
const ::uint32_t
    TableStruct_steammessages_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.client_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.client_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.source_app_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.job_id_source_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.job_id_target_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.target_job_name_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.eresult_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.gc_msg_src_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.gc_dir_index_source_),
        2,
        3,
        4,
        6,
        7,
        0,
        8,
        1,
        5,
        9,
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_.steamid_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _impl_.appid_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.eresult_deprecated_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.account_name_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.persona_name_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_created_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_public_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_inventory_public_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_vac_banned_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_school_account_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_limited_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_subscribed_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.package_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_free_trial_account_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.free_trial_expiration_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_low_violence_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_account_locked_down_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_community_banned_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_trade_banned_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.trade_ban_expiration_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.accountid_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.suspension_end_time_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.steam_level_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.friend_count_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.account_creation_time_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_steamguard_enabled_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_verified_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_two_factor_auth_enabled_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.two_factor_enabled_time_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_verification_time_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_id_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_identifying_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_identity_linked_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_birth_date_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.txn_country_code_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.has_accepted_china_ssa_),
        PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _impl_.is_banned_steam_china_),
        36,
        0,
        1,
        8,
        9,
        10,
        11,
        4,
        5,
        6,
        7,
        12,
        14,
        13,
        15,
        16,
        17,
        24,
        18,
        19,
        20,
        2,
        21,
        22,
        23,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        31,
        32,
        3,
        34,
        35,
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.country_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _impl_.city_),
        3,
        4,
        5,
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, _impl_.infos_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 18, -1, sizeof(::CMsgProtoBufHeader)},
        {28, 38, -1, sizeof(::CGCSystemMsg_GetAccountDetails)},
        {40, 85, -1, sizeof(::CGCSystemMsg_GetAccountDetails_Response)},
        {122, 136, -1, sizeof(::CIPLocationInfo)},
        {142, -1, -1, sizeof(::CGCMsgGetIPLocationResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_CMsgProtoBufHeader_default_instance_._instance,
    &::_CGCSystemMsg_GetAccountDetails_default_instance_._instance,
    &::_CGCSystemMsg_GetAccountDetails_Response_default_instance_._instance,
    &::_CIPLocationInfo_default_instance_._instance,
    &::_CGCMsgGetIPLocationResponse_default_instance_._instance,
};
const char descriptor_table_protodef_steammessages_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023steammessages.proto\032 google/protobuf/d"
    "escriptor.proto\"\361\002\n\022CMsgProtoBufHeader\022\027"
    "\n\017client_steam_id\030\001 \001(\006\022\031\n\021client_sessio"
    "n_id\030\002 \001(\005\022\025\n\rsource_app_id\030\003 \001(\r\022+\n\rjob"
    "_id_source\030\n \001(\006:\02418446744073709551615\022+"
    "\n\rjob_id_target\030\013 \001(\006:\02418446744073709551"
    "615\022\027\n\017target_job_name\030\014 \001(\t\022\022\n\007eresult\030"
    "\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001(\t\022D\n\ngc_ms"
    "g_src\030\310\001 \001(\0162\021.GCProtoBufMsgSrc:\034GCProto"
    "BufMsgSrc_Unspecified\022 \n\023gc_dir_index_so"
    "urce\030\311\001 \001(\005:\002-1:\n\200\246\035\200\002\210\246\035\200\010\"L\n\036CGCSystem"
    "Msg_GetAccountDetails\022\017\n\007steamid\030\001 \001(\006\022\r"
    "\n\005appid\030\002 \001(\r:\n\200\246\035\200\001\210\246\035\200\004\"\214\010\n\'CGCSystemM"
    "sg_GetAccountDetails_Response\022\035\n\022eresult"
    "_deprecated\030\001 \001(\r:\0012\022\024\n\014account_name\030\002 \001"
    "(\t\022\024\n\014persona_name\030\003 \001(\t\022\032\n\022is_profile_c"
    "reated\030\032 \001(\010\022\031\n\021is_profile_public\030\004 \001(\010\022"
    "\033\n\023is_inventory_public\030\005 \001(\010\022\025\n\ris_vac_b"
    "anned\030\007 \001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022\031\n\021is"
    "_school_account\030\t \001(\010\022\022\n\nis_limited\030\n \001("
    "\010\022\025\n\ris_subscribed\030\013 \001(\010\022\017\n\007package\030\014 \001("
    "\r\022\035\n\025is_free_trial_account\030\r \001(\010\022\035\n\025free"
    "_trial_expiration\030\016 \001(\r\022\027\n\017is_low_violen"
    "ce\030\017 \001(\010\022\036\n\026is_account_locked_down\030\020 \001(\010"
    "\022\033\n\023is_community_banned\030\021 \001(\010\022\027\n\017is_trad"
    "e_banned\030\022 \001(\010\022\034\n\024trade_ban_expiration\030\023"
    " \001(\r\022\021\n\taccountid\030\024 \001(\r\022\033\n\023suspension_en"
    "d_time\030\025 \001(\r\022\020\n\010currency\030\026 \001(\t\022\023\n\013steam_"
    "level\030\027 \001(\r\022\024\n\014friend_count\030\030 \001(\r\022\035\n\025acc"
    "ount_creation_time\030\031 \001(\r\022\035\n\025is_steamguar"
    "d_enabled\030\033 \001(\010\022\031\n\021is_phone_verified\030\034 \001"
    "(\010\022\"\n\032is_two_factor_auth_enabled\030\035 \001(\010\022\037"
    "\n\027two_factor_enabled_time\030\036 \001(\r\022\037\n\027phone"
    "_verification_time\030\037 \001(\r\022\020\n\010phone_id\030! \001"
    "(\004\022\034\n\024is_phone_identifying\030\" \001(\010\022\032\n\022rt_i"
    "dentity_linked\030# \001(\r\022\025\n\rrt_birth_date\030$ "
    "\001(\r\022\030\n\020txn_country_code\030% \001(\t\022\036\n\026has_acc"
    "epted_china_ssa\030& \001(\010\022\035\n\025is_banned_steam"
    "_china\030\' \001(\010:\n\200\246\035\200\001\210\246\035\200\004\"p\n\017CIPLocationI"
    "nfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002\022\021\n\tlon"
    "gitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005state\030\005"
    " \001(\t\022\014\n\004city\030\006 \001(\t\">\n\033CGCMsgGetIPLocatio"
    "nResponse\022\037\n\005infos\030\001 \003(\0132\020.CIPLocationIn"
    "fo*\235\001\n\013EGCPlatform\022\026\n\022k_eGCPlatform_None"
    "\020\000\022\024\n\020k_eGCPlatform_PC\020\001\022\025\n\021k_eGCPlatfor"
    "m_Mac\020\002\022\027\n\023k_eGCPlatform_Linux\020\003\022\031\n\025k_eG"
    "CPlatform_Android\020\004\022\025\n\021k_eGCPlatform_iOS"
    "\020\005*\333\001\n\020GCProtoBufMsgSrc\022 \n\034GCProtoBufMsg"
    "Src_Unspecified\020\000\022\037\n\033GCProtoBufMsgSrc_Fr"
    "omSystem\020\001\022 \n\034GCProtoBufMsgSrc_FromSteam"
    "ID\020\002\022\033\n\027GCProtoBufMsgSrc_FromGC\020\003\022 \n\034GCP"
    "rotoBufMsgSrc_ReplySystem\020\004\022#\n\037GCProtoBu"
    "fMsgSrc_SpoofedSteamID\020\005:9\n\tkey_field\022\035."
    "google.protobuf.FieldOptions\030\340\324\003 \001(\010:\005fa"
    "lse:A\n\022msgpool_soft_limit\022\037.google.proto"
    "buf.MessageOptions\030\340\324\003 \001(\005:\00232:B\n\022msgpoo"
    "l_hard_limit\022\037.google.protobuf.MessageOp"
    "tions\030\341\324\003 \001(\005:\003384"
};
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_steammessages_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steammessages_2eproto = {
    false,
    false,
    2298,
    descriptor_table_protodef_steammessages_2eproto,
    "steammessages.proto",
    &descriptor_table_steammessages_2eproto_once,
    descriptor_table_steammessages_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_steammessages_2eproto::offsets,
    file_level_enum_descriptors_steammessages_2eproto,
    file_level_service_descriptors_steammessages_2eproto,
};
const ::google::protobuf::EnumDescriptor* EGCPlatform_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EGCPlatform_internal_data_[] = {
    393216u, 0u, };
bool EGCPlatform_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* GCProtoBufMsgSrc_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GCProtoBufMsgSrc_internal_data_[] = {
    393216u, 0u, };
bool GCProtoBufMsgSrc_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class CMsgProtoBufHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgProtoBufHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._has_bits_);
};

CMsgProtoBufHeader::CMsgProtoBufHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoBufHeader)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtoBufHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgProtoBufHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        target_job_name_(arena, from.target_job_name_),
        error_message_(arena, from.error_message_) {}

CMsgProtoBufHeader::CMsgProtoBufHeader(
    ::google::protobuf::Arena* arena,
    const CMsgProtoBufHeader& from)
    : ::google::protobuf::Message(arena) {
  CMsgProtoBufHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_steam_id_),
           offsetof(Impl_, gc_dir_index_source_) -
               offsetof(Impl_, client_steam_id_) +
               sizeof(Impl_::gc_dir_index_source_));

  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtoBufHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        target_job_name_(arena),
        error_message_(arena),
        job_id_source_{::uint64_t{18446744073709551615u}},
        job_id_target_{::uint64_t{18446744073709551615u}},
        eresult_{2},
        gc_dir_index_source_{-1} {}

inline void CMsgProtoBufHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_steam_id_),
           0,
           offsetof(Impl_, gc_msg_src_) -
               offsetof(Impl_, client_steam_id_) +
               sizeof(Impl_::gc_msg_src_));
}
CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgProtoBufHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.target_job_name_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgProtoBufHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._cached_size_),
              false,
          },
          &CMsgProtoBufHeader::MergeImpl,
          &CMsgProtoBufHeader::kDescriptorMethods,
          &descriptor_table_steammessages_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 63, 7> CMsgProtoBufHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._has_bits_),
    0, // no _extensions_
    201, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294951416,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgProtoBufHeader_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgProtoBufHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 client_steam_id = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_steam_id_)}},
    // optional int32 client_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.client_session_id_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_session_id_)}},
    // optional uint32 source_app_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.source_app_id_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.source_app_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    {::_pbi::TcParser::FastEr0S2,
     {3264, 5, 5, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_msg_src_)}},
    // optional int32 gc_dir_index_source = 201 [default = -1];
    {::_pbi::TcParser::FastV32S2,
     {3272, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_dir_index_source_)}},
    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    {::_pbi::TcParser::FastF64S1,
     {81, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.job_id_source_)}},
    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    {::_pbi::TcParser::FastF64S1,
     {89, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.job_id_target_)}},
    // optional string target_job_name = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.target_job_name_)}},
    // optional int32 eresult = 13 [default = 2];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.eresult_), 8>(),
     {104, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.eresult_)}},
    // optional string error_message = 14;
    {::_pbi::TcParser::FastSS1,
     {114, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.error_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    200, 0, 1,
    65532, 8,
    65535, 65535
  }}, {{
    // optional fixed64 client_steam_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_steam_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional int32 client_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_session_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 source_app_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.source_app_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.job_id_source_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.job_id_target_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string target_job_name = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.target_job_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 eresult = 13 [default = 2];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.eresult_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string error_message = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.error_message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_msg_src_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 gc_dir_index_source = 201 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_dir_index_source_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {0, 6},
  }}, {{
    "\22\0\0\0\0\0\17\0\15\0\0\0\0\0\0\0"
    "CMsgProtoBufHeader"
    "target_job_name"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.client_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gc_msg_src_) -
        reinterpret_cast<char*>(&_impl_.client_steam_id_)) + sizeof(_impl_.gc_msg_src_));
    _impl_.job_id_source_ = ::uint64_t{18446744073709551615u};
    _impl_.job_id_target_ = ::uint64_t{18446744073709551615u};
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.eresult_ = 2;
    _impl_.gc_dir_index_source_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgProtoBufHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        10, this->_internal_job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        11, this->_internal_job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_target_job_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgProtoBufHeader.target_job_name");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgProtoBufHeader.error_message");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        200, this->_internal_gc_msg_src(), target);
  }

  // optional int32 gc_dir_index_source = 201 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        201, this->_internal_gc_dir_index_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

::size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_message());
    }

    // optional fixed64 client_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 9;
    }

    // optional int32 client_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_source_app_id());
    }

    // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_gc_msg_src());
    }

    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000040u) {
      total_size += 9;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_eresult());
    }

    // optional int32 gc_dir_index_source = 201 [default = -1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_gc_dir_index_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgProtoBufHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgProtoBufHeader*>(&to_msg);
  auto& from = static_cast<const CMsgProtoBufHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target_job_name(from._internal_target_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_steam_id_ = from._impl_.client_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_session_id_ = from._impl_.client_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.source_app_id_ = from._impl_.source_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.gc_msg_src_ = from._impl_.gc_msg_src_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.job_id_source_ = from._impl_.job_id_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.job_id_target_ = from._impl_.job_id_target_;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.gc_dir_index_source_ = from._impl_.gc_dir_index_source_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_job_name_, &other->_impl_.target_job_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.gc_dir_index_source_)
      + sizeof(CMsgProtoBufHeader::_impl_.gc_dir_index_source_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.client_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.client_steam_id_));
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGCSystemMsg_GetAccountDetails::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CGCSystemMsg_GetAccountDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_._has_bits_);
};

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails)
}
CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(
    ::google::protobuf::Arena* arena, const CGCSystemMsg_GetAccountDetails& from)
    : CGCSystemMsg_GetAccountDetails(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CGCSystemMsg_GetAccountDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CGCSystemMsg_GetAccountDetails::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_),
           0,
           offsetof(Impl_, appid_) -
               offsetof(Impl_, steamid_) +
               sizeof(Impl_::appid_));
}
CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CGCSystemMsg_GetAccountDetails::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CGCSystemMsg_GetAccountDetails::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_._cached_size_),
              false,
          },
          &CGCSystemMsg_GetAccountDetails::MergeImpl,
          &CGCSystemMsg_GetAccountDetails::kDescriptorMethods,
          &descriptor_table_steammessages_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CGCSystemMsg_GetAccountDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CGCSystemMsg_GetAccountDetails_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGCSystemMsg_GetAccountDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 appid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGCSystemMsg_GetAccountDetails, _impl_.appid_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.appid_)}},
    // optional fixed64 steamid = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.steamid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed64 steamid = 1;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.steamid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 appid = 2;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.appid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CGCSystemMsg_GetAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.steamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.appid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CGCSystemMsg_GetAccountDetails::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails)
  return target;
}

::size_t CGCSystemMsg_GetAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CGCSystemMsg_GetAccountDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetAccountDetails*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetAccountDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGCSystemMsg_GetAccountDetails::InternalSwap(CGCSystemMsg_GetAccountDetails* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.appid_)
      + sizeof(CGCSystemMsg_GetAccountDetails::_impl_.appid_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGCSystemMsg_GetAccountDetails_Response::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CGCSystemMsg_GetAccountDetails_Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_._has_bits_);
};

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails_Response)
}
inline PROTOBUF_NDEBUG_INLINE CGCSystemMsg_GetAccountDetails_Response::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CGCSystemMsg_GetAccountDetails_Response& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_name_(arena, from.account_name_),
        persona_name_(arena, from.persona_name_),
        currency_(arena, from.currency_),
        txn_country_code_(arena, from.txn_country_code_) {}

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(
    ::google::protobuf::Arena* arena,
    const CGCSystemMsg_GetAccountDetails_Response& from)
    : ::google::protobuf::Message(arena) {
  CGCSystemMsg_GetAccountDetails_Response* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_cyber_cafe_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_cyber_cafe_),
           offsetof(Impl_, eresult_deprecated_) -
               offsetof(Impl_, is_cyber_cafe_) +
               sizeof(Impl_::eresult_deprecated_));

  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetAccountDetails_Response)
}
inline PROTOBUF_NDEBUG_INLINE CGCSystemMsg_GetAccountDetails_Response::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        account_name_(arena),
        persona_name_(arena),
        currency_(arena),
        txn_country_code_(arena),
        eresult_deprecated_{2u} {}

inline void CGCSystemMsg_GetAccountDetails_Response::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_cyber_cafe_),
           0,
           offsetof(Impl_, is_banned_steam_china_) -
               offsetof(Impl_, is_cyber_cafe_) +
               sizeof(Impl_::is_banned_steam_china_));
}
CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails_Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.account_name_.Destroy();
  _impl_.persona_name_.Destroy();
  _impl_.currency_.Destroy();
  _impl_.txn_country_code_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CGCSystemMsg_GetAccountDetails_Response::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_._cached_size_),
              false,
          },
          &CGCSystemMsg_GetAccountDetails_Response::MergeImpl,
          &CGCSystemMsg_GetAccountDetails_Response::kDescriptorMethods,
          &descriptor_table_steammessages_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 37, 0, 128, 7> CGCSystemMsg_GetAccountDetails_Response::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_._has_bits_),
    0, // no _extensions_
    39, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147483680,  // skipmap
    offsetof(decltype(_table_), field_entries),
    37,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CGCSystemMsg_GetAccountDetails_Response_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGCSystemMsg_GetAccountDetails_Response>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string account_name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.account_name_)}},
    // optional string persona_name = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.persona_name_)}},
    // optional bool is_profile_public = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_public_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_public_)}},
    // optional bool is_inventory_public = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_inventory_public_), 10>(),
     {40, 10, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_inventory_public_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool is_vac_banned = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_vac_banned_), 11>(),
     {56, 11, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_vac_banned_)}},
    // optional bool is_cyber_cafe = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_), 4>(),
     {64, 4, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_)}},
    // optional bool is_school_account = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_school_account_), 5>(),
     {72, 5, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_school_account_)}},
    // optional bool is_limited = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_limited_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_limited_)}},
    // optional bool is_subscribed = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_subscribed_), 7>(),
     {88, 7, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_subscribed_)}},
    // optional uint32 package = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.package_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.package_)}},
    // optional bool is_free_trial_account = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_free_trial_account_), 14>(),
     {104, 14, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_free_trial_account_)}},
    // optional uint32 free_trial_expiration = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.free_trial_expiration_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.free_trial_expiration_)}},
    // optional bool is_low_violence = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_low_violence_), 15>(),
     {120, 15, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_low_violence_)}},
    // optional bool is_account_locked_down = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 16, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_account_locked_down_)}},
    // optional bool is_community_banned = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 17, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_community_banned_)}},
    // optional bool is_trade_banned = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 24, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_trade_banned_)}},
    // optional uint32 trade_ban_expiration = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.trade_ban_expiration_)}},
    // optional uint32 accountid = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.accountid_)}},
    // optional uint32 suspension_end_time = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 20, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.suspension_end_time_)}},
    // optional string currency = 22;
    {::_pbi::TcParser::FastSS2,
     {434, 2, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.currency_)}},
    // optional uint32 steam_level = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 21, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.steam_level_)}},
    // optional uint32 friend_count = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 22, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.friend_count_)}},
    // optional uint32 account_creation_time = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 23, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.account_creation_time_)}},
    // optional bool is_profile_created = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 8, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_created_)}},
    // optional bool is_steamguard_enabled = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 25, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_steamguard_enabled_)}},
    // optional bool is_phone_verified = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 26, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_verified_)}},
    // optional bool is_two_factor_auth_enabled = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 27, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_two_factor_auth_enabled_)}},
    // optional uint32 two_factor_enabled_time = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 28, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.two_factor_enabled_time_)}},
    // optional uint32 phone_verification_time = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 29, 0, PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_verification_time_)}},
  }}, {{
    33, 0, 1,
    65408, 30,
    65535, 65535
  }}, {{
    // optional uint32 eresult_deprecated = 1 [default = 2];
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.eresult_deprecated_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string account_name = 2;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.account_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string persona_name = 3;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.persona_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool is_profile_public = 4;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_public_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_inventory_public = 5;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_inventory_public_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_vac_banned = 7;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_vac_banned_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_cyber_cafe = 8;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_school_account = 9;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_school_account_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_limited = 10;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_limited_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_subscribed = 11;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_subscribed_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 package = 12;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.package_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool is_free_trial_account = 13;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_free_trial_account_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 free_trial_expiration = 14;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.free_trial_expiration_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool is_low_violence = 15;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_low_violence_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_account_locked_down = 16;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_account_locked_down_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_community_banned = 17;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_community_banned_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_trade_banned = 18;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_trade_banned_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 trade_ban_expiration = 19;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.trade_ban_expiration_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 accountid = 20;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.accountid_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 suspension_end_time = 21;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.suspension_end_time_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string currency = 22;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.currency_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 steam_level = 23;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.steam_level_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 friend_count = 24;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.friend_count_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 account_creation_time = 25;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.account_creation_time_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool is_profile_created = 26;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_profile_created_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_steamguard_enabled = 27;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_steamguard_enabled_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_phone_verified = 28;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_verified_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_two_factor_auth_enabled = 29;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_two_factor_auth_enabled_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 two_factor_enabled_time = 30;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.two_factor_enabled_time_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 phone_verification_time = 31;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_verification_time_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 phone_id = 33;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.phone_id_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional bool is_phone_identifying = 34;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_phone_identifying_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 rt_identity_linked = 35;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_identity_linked_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rt_birth_date = 36;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.rt_birth_date_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string txn_country_code = 37;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.txn_country_code_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool has_accepted_china_ssa = 38;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.has_accepted_china_ssa_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_banned_steam_china = 39;
    {PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_banned_steam_china_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\47\0\14\14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\10\0\0\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0\0"
    "CGCSystemMsg_GetAccountDetails_Response"
    "account_name"
    "persona_name"
    "currency"
    "txn_country_code"
  }},
};

PROTOBUF_NOINLINE void CGCSystemMsg_GetAccountDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails_Response)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.txn_country_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.is_cyber_cafe_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_subscribed_) -
        reinterpret_cast<char*>(&_impl_.is_cyber_cafe_)) + sizeof(_impl_.is_subscribed_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.is_profile_created_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_low_violence_) -
        reinterpret_cast<char*>(&_impl_.is_profile_created_)) + sizeof(_impl_.is_low_violence_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.is_account_locked_down_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.account_creation_time_) -
        reinterpret_cast<char*>(&_impl_.is_account_locked_down_)) + sizeof(_impl_.account_creation_time_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.is_trade_banned_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rt_identity_linked_) -
        reinterpret_cast<char*>(&_impl_.is_trade_banned_)) + sizeof(_impl_.rt_identity_linked_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.rt_birth_date_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_banned_steam_china_) -
        reinterpret_cast<char*>(&_impl_.rt_birth_date_)) + sizeof(_impl_.is_banned_steam_china_));
    _impl_.eresult_deprecated_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CGCSystemMsg_GetAccountDetails_Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails_Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_eresult_deprecated(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_account_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGCSystemMsg_GetAccountDetails_Response.account_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_persona_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGCSystemMsg_GetAccountDetails_Response.persona_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_inventory_public(), target);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this->_internal_is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_accountid(), target);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        21, this->_internal_suspension_end_time(), target);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_currency();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGCSystemMsg_GetAccountDetails_Response.currency");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        23, this->_internal_steam_level(), target);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        24, this->_internal_friend_count(), target);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        25, this->_internal_account_creation_time(), target);
  }

  // optional bool is_profile_created = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_is_profile_created(), target);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        27, this->_internal_is_steamguard_enabled(), target);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_is_phone_verified(), target);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        29, this->_internal_is_two_factor_auth_enabled(), target);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        30, this->_internal_two_factor_enabled_time(), target);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        31, this->_internal_phone_verification_time(), target);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        33, this->_internal_phone_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        34, this->_internal_is_phone_identifying(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rt_identity_linked = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        35, this->_internal_rt_identity_linked(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 rt_birth_date = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        36, this->_internal_rt_birth_date(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string txn_country_code = 37;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_txn_country_code();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
    target = stream->WriteStringMaybeAliased(37, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool has_accepted_china_ssa = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        38, this->_internal_has_accepted_china_ssa(), target);
  }

  // optional bool is_banned_steam_china = 39;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        39, this->_internal_is_banned_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails_Response)
  return target;
}

::size_t CGCSystemMsg_GetAccountDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails_Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_account_name());
    }

    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_persona_name());
    }

    // optional string currency = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_currency());
    }

    // optional string txn_country_code = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_txn_country_code());
    }

    // optional bool is_cyber_cafe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool is_school_account = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool is_limited = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool is_subscribed = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_profile_created = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 3;
    }

    // optional bool is_profile_public = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool is_inventory_public = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool is_vac_banned = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional uint32 package = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_package());
    }

    // optional uint32 free_trial_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_free_trial_expiration());
    }

    // optional bool is_free_trial_account = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2;
    }

    // optional bool is_low_violence = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_account_locked_down = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }

    // optional bool is_community_banned = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_accountid());
    }

    // optional uint32 suspension_end_time = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_suspension_end_time());
    }

    // optional uint32 steam_level = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_steam_level());
    }

    // optional uint32 friend_count = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_friend_count());
    }

    // optional uint32 account_creation_time = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_account_creation_time());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_trade_banned = 18;
    if (cached_has_bits & 0x01000000u) {
      total_size += 3;
    }

    // optional bool is_steamguard_enabled = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 3;
    }

    // optional bool is_phone_verified = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 3;
    }

    // optional bool is_two_factor_auth_enabled = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 3;
    }

    // optional uint32 two_factor_enabled_time = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_two_factor_enabled_time());
    }

    // optional uint32 phone_verification_time = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_phone_verification_time());
    }

    // optional uint64 phone_id = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_phone_id());
    }

    // optional uint32 rt_identity_linked = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rt_identity_linked());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 rt_birth_date = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rt_birth_date());
    }

    // optional bool is_phone_identifying = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 3;
    }

    // optional bool has_accepted_china_ssa = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 3;
    }

    // optional bool is_banned_steam_china = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 3;
    }

    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_eresult_deprecated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CGCSystemMsg_GetAccountDetails_Response::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGCSystemMsg_GetAccountDetails_Response*>(&to_msg);
  auto& from = static_cast<const CGCSystemMsg_GetAccountDetails_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails_Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_txn_country_code(from._internal_txn_country_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_cyber_cafe_ = from._impl_.is_cyber_cafe_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_school_account_ = from._impl_.is_school_account_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_limited_ = from._impl_.is_limited_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_subscribed_ = from._impl_.is_subscribed_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_profile_created_ = from._impl_.is_profile_created_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_profile_public_ = from._impl_.is_profile_public_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_inventory_public_ = from._impl_.is_inventory_public_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_vac_banned_ = from._impl_.is_vac_banned_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.package_ = from._impl_.package_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.free_trial_expiration_ = from._impl_.free_trial_expiration_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_free_trial_account_ = from._impl_.is_free_trial_account_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.is_low_violence_ = from._impl_.is_low_violence_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.is_account_locked_down_ = from._impl_.is_account_locked_down_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_community_banned_ = from._impl_.is_community_banned_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.trade_ban_expiration_ = from._impl_.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.suspension_end_time_ = from._impl_.suspension_end_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.steam_level_ = from._impl_.steam_level_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.friend_count_ = from._impl_.friend_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.account_creation_time_ = from._impl_.account_creation_time_;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.is_trade_banned_ = from._impl_.is_trade_banned_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.is_steamguard_enabled_ = from._impl_.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.is_phone_verified_ = from._impl_.is_phone_verified_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.is_two_factor_auth_enabled_ = from._impl_.is_two_factor_auth_enabled_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.two_factor_enabled_time_ = from._impl_.two_factor_enabled_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.phone_verification_time_ = from._impl_.phone_verification_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.phone_id_ = from._impl_.phone_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.rt_identity_linked_ = from._impl_.rt_identity_linked_;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rt_birth_date_ = from._impl_.rt_birth_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_phone_identifying_ = from._impl_.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.has_accepted_china_ssa_ = from._impl_.has_accepted_china_ssa_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_banned_steam_china_ = from._impl_.is_banned_steam_china_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.eresult_deprecated_ = from._impl_.eresult_deprecated_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGCSystemMsg_GetAccountDetails_Response::InternalSwap(CGCSystemMsg_GetAccountDetails_Response* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, &other->_impl_.account_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.persona_name_, &other->_impl_.persona_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.txn_country_code_, &other->_impl_.txn_country_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.eresult_deprecated_)
      + sizeof(CGCSystemMsg_GetAccountDetails_Response::_impl_.eresult_deprecated_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, _impl_.is_cyber_cafe_)>(
          reinterpret_cast<char*>(&_impl_.is_cyber_cafe_),
          reinterpret_cast<char*>(&other->_impl_.is_cyber_cafe_));
}

::google::protobuf::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CIPLocationInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CIPLocationInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_._has_bits_);
};

CIPLocationInfo::CIPLocationInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CIPLocationInfo)
}
inline PROTOBUF_NDEBUG_INLINE CIPLocationInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CIPLocationInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        country_(arena, from.country_),
        state_(arena, from.state_),
        city_(arena, from.city_) {}

CIPLocationInfo::CIPLocationInfo(
    ::google::protobuf::Arena* arena,
    const CIPLocationInfo& from)
    : ::google::protobuf::Message(arena) {
  CIPLocationInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ip_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ip_),
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, ip_) +
               sizeof(Impl_::longitude_));

  // @@protoc_insertion_point(copy_constructor:CIPLocationInfo)
}
inline PROTOBUF_NDEBUG_INLINE CIPLocationInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        country_(arena),
        state_(arena),
        city_(arena) {}

inline void CIPLocationInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ip_),
           0,
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, ip_) +
               sizeof(Impl_::longitude_));
}
CIPLocationInfo::~CIPLocationInfo() {
  // @@protoc_insertion_point(destructor:CIPLocationInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CIPLocationInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.country_.Destroy();
  _impl_.state_.Destroy();
  _impl_.city_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CIPLocationInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_._cached_size_),
              false,
          },
          &CIPLocationInfo::MergeImpl,
          &CIPLocationInfo::kDescriptorMethods,
          &descriptor_table_steammessages_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 40, 2> CIPLocationInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CIPLocationInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CIPLocationInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 ip = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CIPLocationInfo, _impl_.ip_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.ip_)}},
    // optional float latitude = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 4, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.latitude_)}},
    // optional float longitude = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 5, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.longitude_)}},
    // optional string country = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.country_)}},
    // optional string state = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.state_)}},
    // optional string city = 6;
    {::_pbi::TcParser::FastSS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.city_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 ip = 1;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.ip_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float latitude = 2;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.latitude_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float longitude = 3;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.longitude_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional string country = 4;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.country_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string state = 5;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string city = 6;
    {PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.city_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\0\0\0\7\5\4\0"
    "CIPLocationInfo"
    "country"
    "state"
    "city"
  }},
};

PROTOBUF_NOINLINE void CIPLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIPLocationInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.city_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.ip_)) + sizeof(_impl_.longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CIPLocationInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIPLocationInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ip(), target);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_longitude(), target);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_country();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CIPLocationInfo.country");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CIPLocationInfo.state");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_city();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CIPLocationInfo.city");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIPLocationInfo)
  return target;
}

::size_t CIPLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIPLocationInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_country());
    }

    // optional string state = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_state());
    }

    // optional string city = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_city());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ip());
    }

    // optional float latitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional float longitude = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CIPLocationInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CIPLocationInfo*>(&to_msg);
  auto& from = static_cast<const CIPLocationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CIPLocationInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.longitude_ = from._impl_.longitude_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CIPLocationInfo::InternalSwap(CIPLocationInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_, &other->_impl_.country_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, &other->_impl_.state_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.city_, &other->_impl_.city_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.longitude_)
      + sizeof(CIPLocationInfo::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(CIPLocationInfo, _impl_.ip_)>(
          reinterpret_cast<char*>(&_impl_.ip_),
          reinterpret_cast<char*>(&other->_impl_.ip_));
}

::google::protobuf::Metadata CIPLocationInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGCMsgGetIPLocationResponse::_Internal {
 public:
};

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE CGCMsgGetIPLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CGCMsgGetIPLocationResponse& from_msg)
      : infos_{visibility, arena, from.infos_},
        _cached_size_{0} {}

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(
    ::google::protobuf::Arena* arena,
    const CGCMsgGetIPLocationResponse& from)
    : ::google::protobuf::Message(arena) {
  CGCMsgGetIPLocationResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPLocationResponse)
}
inline PROTOBUF_NDEBUG_INLINE CGCMsgGetIPLocationResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : infos_{visibility, arena},
        _cached_size_{0} {}

inline void CGCMsgGetIPLocationResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPLocationResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CGCMsgGetIPLocationResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CGCMsgGetIPLocationResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _impl_._cached_size_),
              false,
          },
          &CGCMsgGetIPLocationResponse::MergeImpl,
          &CGCMsgGetIPLocationResponse::kDescriptorMethods,
          &descriptor_table_steammessages_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CGCMsgGetIPLocationResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CGCMsgGetIPLocationResponse_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGCMsgGetIPLocationResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CIPLocationInfo infos = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _impl_.infos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CIPLocationInfo infos = 1;
    {PROTOBUF_FIELD_OFFSET(CGCMsgGetIPLocationResponse, _impl_.infos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CIPLocationInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CGCMsgGetIPLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPLocationResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.infos_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CGCMsgGetIPLocationResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPLocationResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CIPLocationInfo infos = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_infos_size());
       i < n; i++) {
    const auto& repfield = this->_internal_infos().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPLocationResponse)
  return target;
}

::size_t CGCMsgGetIPLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPLocationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .CIPLocationInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_internal_infos()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CGCMsgGetIPLocationResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGCMsgGetIPLocationResponse*>(&to_msg);
  auto& from = static_cast<const CGCMsgGetIPLocationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPLocationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_infos()->MergeFrom(
      from._internal_infos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGCMsgGetIPLocationResponse::InternalSwap(CGCMsgGetIPLocationResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.infos_.InternalSwap(&other->_impl_.infos_);
}

::google::protobuf::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::FieldOptions, ::_pbi::PrimitiveTypeTraits< bool >,
                            8, false>
            key_field(kKeyFieldFieldNumber, false);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::MessageOptions, ::_pbi::PrimitiveTypeTraits< ::int32_t >,
                            5, false>
            msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::MessageOptions, ::_pbi::PrimitiveTypeTraits< ::int32_t >,
                            5, false>
            msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_steammessages_2eproto),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::FieldOptions::default_instance(), 60000, 8,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::MessageOptions::default_instance(), 60000, 5,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::MessageOptions::default_instance(), 60001, 5,
            false, false),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
