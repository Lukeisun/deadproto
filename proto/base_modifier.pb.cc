// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: base_modifier.proto
// Protobuf C++ Version: 5.27.3

#include "base_modifier.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CModifierTableEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        string1__(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        string2__(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        string3__(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        string4__(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        vec1__{nullptr},
        vec2__{nullptr},
        vec3__{nullptr},
        vec4__{nullptr},
        serial_number_{0u},
        modifier_subclass_{0u},
        stack_count_{0},
        max_stack_count_{0},
        last_applied_time_{0},
        aura_provider_serial_number_{0},
        ability_subclass_{0u},
        bool1__{false},
        bool2__{false},
        bool3__{false},
        bool4__{false},
        int1__{0},
        int2__{0},
        int3__{0},
        int4__{0},
        float1__{0},
        float2__{0},
        float3__{0},
        float4__{0},
        uint1__{::uint64_t{0u}},
        uint2__{::uint64_t{0u}},
        uint3__{::uint64_t{0u}},
        uint4__{::uint64_t{0u}},
        float5__{0},
        float6__{0},
        float7__{0},
        float8__{0},
        float9__{0},
        float10__{0},
        entry_type_{static_cast< ::MODIFIER_ENTRY_TYPE >(1)},
        parent_{16777215u},
        duration_{-1},
        caster_{16777215u},
        ability_{16777215u},
        aura_provider_ehandle_{16777215u} {}

template <typename>
PROTOBUF_CONSTEXPR CModifierTableEntry::CModifierTableEntry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CModifierTableEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CModifierTableEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CModifierTableEntryDefaultTypeInternal() {}
  union {
    CModifierTableEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CModifierTableEntryDefaultTypeInternal _CModifierTableEntry_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_base_5fmodifier_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_base_5fmodifier_2eproto = nullptr;
const ::uint32_t
    TableStruct_base_5fmodifier_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.entry_type_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.parent_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.serial_number_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.modifier_subclass_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.stack_count_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.max_stack_count_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.last_applied_time_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.duration_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.caster_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.ability_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.aura_provider_serial_number_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.aura_provider_ehandle_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.ability_subclass_),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.bool4__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.int4__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float4__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float5__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float6__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float7__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float8__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float9__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.float10__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.uint4__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.vec4__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string1__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string2__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string3__),
        PROTOBUF_FIELD_OFFSET(::CModifierTableEntry, _impl_.string4__),
        37,
        38,
        8,
        9,
        10,
        11,
        12,
        39,
        40,
        41,
        13,
        42,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        27,
        28,
        29,
        30,
        4,
        5,
        6,
        7,
        0,
        1,
        2,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 51, -1, sizeof(::CModifierTableEntry)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_CModifierTableEntry_default_instance_._instance,
};
const char descriptor_table_protodef_base_5fmodifier_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023base_modifier.proto\032\026networkbasetypes."
    "proto\"\302\007\n\023CModifierTableEntry\022D\n\nentry_t"
    "ype\030\001 \002(\0162\024.MODIFIER_ENTRY_TYPE:\032MODIFIE"
    "R_ENTRY_TYPE_ACTIVE\022\030\n\006parent\030\002 \002(\r:\010167"
    "77215\022\025\n\rserial_number\030\003 \002(\r\022\031\n\021modifier"
    "_subclass\030\004 \001(\r\022\023\n\013stack_count\030\005 \001(\005\022\027\n\017"
    "max_stack_count\030\006 \001(\005\022\031\n\021last_applied_ti"
    "me\030\007 \001(\002\022\024\n\010duration\030\010 \001(\002:\002-1\022\030\n\006caster"
    "\030\t \001(\r:\01016777215\022\031\n\007ability\030\n \001(\r:\01016777"
    "215\022#\n\033aura_provider_serial_number\030\013 \001(\005"
    "\022\'\n\025aura_provider_ehandle\030\014 \001(\r:\0101677721"
    "5\022\030\n\020ability_subclass\030\r \001(\r\022\016\n\006bool1_\030\024 "
    "\001(\010\022\016\n\006bool2_\030\025 \001(\010\022\016\n\006bool3_\030\026 \001(\010\022\016\n\006b"
    "ool4_\030\027 \001(\010\022\r\n\005int1_\030\031 \001(\005\022\r\n\005int2_\030\032 \001("
    "\005\022\r\n\005int3_\030\033 \001(\005\022\r\n\005int4_\030\034 \001(\005\022\017\n\007float"
    "1_\030\036 \001(\002\022\017\n\007float2_\030\037 \001(\002\022\017\n\007float3_\030  \001"
    "(\002\022\017\n\007float4_\030! \001(\002\022\017\n\007float5_\0301 \001(\002\022\017\n\007"
    "float6_\0302 \001(\002\022\017\n\007float7_\0303 \001(\002\022\017\n\007float8"
    "_\0304 \001(\002\022\017\n\007float9_\0305 \001(\002\022\020\n\010float10_\0306 \001"
    "(\002\022\016\n\006uint1_\030# \001(\004\022\016\n\006uint2_\030$ \001(\004\022\016\n\006ui"
    "nt3_\030% \001(\004\022\016\n\006uint4_\030& \001(\004\022\032\n\005vec1_\030( \001("
    "\0132\013.CMsgVector\022\032\n\005vec2_\030) \001(\0132\013.CMsgVect"
    "or\022\032\n\005vec3_\030* \001(\0132\013.CMsgVector\022\032\n\005vec4_\030"
    "+ \001(\0132\013.CMsgVector\022\020\n\010string1_\030- \001(\t\022\020\n\010"
    "string2_\030. \001(\t\022\020\n\010string3_\030/ \001(\t\022\020\n\010stri"
    "ng4_\0300 \001(\t*V\n\023MODIFIER_ENTRY_TYPE\022\036\n\032MOD"
    "IFIER_ENTRY_TYPE_ACTIVE\020\001\022\037\n\033MODIFIER_EN"
    "TRY_TYPE_REMOVED\020\002"
};
static const ::_pbi::DescriptorTable* const descriptor_table_base_5fmodifier_2eproto_deps[1] =
    {
        &::descriptor_table_networkbasetypes_2eproto,
};
static ::absl::once_flag descriptor_table_base_5fmodifier_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_base_5fmodifier_2eproto = {
    false,
    false,
    1098,
    descriptor_table_protodef_base_5fmodifier_2eproto,
    "base_modifier.proto",
    &descriptor_table_base_5fmodifier_2eproto_once,
    descriptor_table_base_5fmodifier_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_base_5fmodifier_2eproto::offsets,
    file_level_enum_descriptors_base_5fmodifier_2eproto,
    file_level_service_descriptors_base_5fmodifier_2eproto,
};
const ::google::protobuf::EnumDescriptor* MODIFIER_ENTRY_TYPE_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_base_5fmodifier_2eproto);
  return file_level_enum_descriptors_base_5fmodifier_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MODIFIER_ENTRY_TYPE_internal_data_[] = {
    131073u, 0u, };
bool MODIFIER_ENTRY_TYPE_IsValid(int value) {
  return 1 <= value && value <= 2;
}
// ===================================================================

class CModifierTableEntry::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CModifierTableEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x00000100) ^ 0x00000100)
       | ((has_bits[1] & 0x00000060) ^ 0x00000060)) != 0;
  }
};

void CModifierTableEntry::clear_vec1_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec1__ != nullptr) _impl_.vec1__->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CModifierTableEntry::clear_vec2_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec2__ != nullptr) _impl_.vec2__->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CModifierTableEntry::clear_vec3_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec3__ != nullptr) _impl_.vec3__->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CModifierTableEntry::clear_vec4_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vec4__ != nullptr) _impl_.vec4__->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
CModifierTableEntry::CModifierTableEntry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CModifierTableEntry)
}
inline PROTOBUF_NDEBUG_INLINE CModifierTableEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CModifierTableEntry& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        string1__(arena, from.string1__),
        string2__(arena, from.string2__),
        string3__(arena, from.string3__),
        string4__(arena, from.string4__) {}

CModifierTableEntry::CModifierTableEntry(
    ::google::protobuf::Arena* arena,
    const CModifierTableEntry& from)
    : ::google::protobuf::Message(arena) {
  CModifierTableEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vec1__ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::CMsgVector>(
                              arena, *from._impl_.vec1__)
                        : nullptr;
  _impl_.vec2__ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::CMsgVector>(
                              arena, *from._impl_.vec2__)
                        : nullptr;
  _impl_.vec3__ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::CMsgVector>(
                              arena, *from._impl_.vec3__)
                        : nullptr;
  _impl_.vec4__ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::CMsgVector>(
                              arena, *from._impl_.vec4__)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serial_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, serial_number_),
           offsetof(Impl_, aura_provider_ehandle_) -
               offsetof(Impl_, serial_number_) +
               sizeof(Impl_::aura_provider_ehandle_));

  // @@protoc_insertion_point(copy_constructor:CModifierTableEntry)
}
inline PROTOBUF_NDEBUG_INLINE CModifierTableEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        string1__(arena),
        string2__(arena),
        string3__(arena),
        string4__(arena),
        entry_type_{static_cast< ::MODIFIER_ENTRY_TYPE >(1)},
        parent_{16777215u},
        duration_{-1},
        caster_{16777215u},
        ability_{16777215u},
        aura_provider_ehandle_{16777215u} {}

inline void CModifierTableEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vec1__),
           0,
           offsetof(Impl_, float10__) -
               offsetof(Impl_, vec1__) +
               sizeof(Impl_::float10__));
}
CModifierTableEntry::~CModifierTableEntry() {
  // @@protoc_insertion_point(destructor:CModifierTableEntry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CModifierTableEntry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.string1__.Destroy();
  _impl_.string2__.Destroy();
  _impl_.string3__.Destroy();
  _impl_.string4__.Destroy();
  delete _impl_.vec1__;
  delete _impl_.vec2__;
  delete _impl_.vec3__;
  delete _impl_.vec4__;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CModifierTableEntry::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              CModifierTableEntry::IsInitializedImpl,
              PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_._cached_size_),
              false,
          },
          &CModifierTableEntry::MergeImpl,
          &CModifierTableEntry::kDescriptorMethods,
          &descriptor_table_base_5fmodifier_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 43, 5, 100, 9> CModifierTableEntry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_._has_bits_),
    0, // no _extensions_
    54, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    277340160,  // skipmap
    offsetof(decltype(_table_), field_entries),
    43,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CModifierTableEntry_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CModifierTableEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // required uint32 serial_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.serial_number_), 8>(),
     {24, 8, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.serial_number_)}},
    // optional uint32 modifier_subclass = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.modifier_subclass_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.modifier_subclass_)}},
    // optional int32 stack_count = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.stack_count_), 10>(),
     {40, 10, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.stack_count_)}},
    // optional int32 max_stack_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.max_stack_count_), 11>(),
     {48, 11, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.max_stack_count_)}},
    // optional float last_applied_time = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 12, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.last_applied_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 aura_provider_serial_number = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.aura_provider_serial_number_), 13>(),
     {88, 13, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.aura_provider_serial_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 ability_subclass = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CModifierTableEntry, _impl_.ability_subclass_), 14>(),
     {104, 14, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.ability_subclass_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional float float3_ = 32;
    {::_pbi::TcParser::FastF32S2,
     {645, 25, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float3__)}},
    // optional float float4_ = 33;
    {::_pbi::TcParser::FastF32S2,
     {653, 26, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float4__)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 uint1_ = 35;
    {::_pbi::TcParser::FastV64S2,
     {664, 27, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.uint1__)}},
    // optional bool bool1_ = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 15, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool1__)}},
    // optional bool bool2_ = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 16, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool2__)}},
    // optional bool bool3_ = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 17, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool3__)}},
    // optional bool bool4_ = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 18, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool4__)}},
    // optional .CMsgVector vec1_ = 40;
    {::_pbi::TcParser::FastMtS2,
     {706, 4, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec1__)}},
    // optional int32 int1_ = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 19, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int1__)}},
    // optional int32 int2_ = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 20, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int2__)}},
    // optional int32 int3_ = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 21, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int3__)}},
    // optional int32 int4_ = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 22, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int4__)}},
    // optional string string1_ = 45;
    {::_pbi::TcParser::FastSS2,
     {746, 0, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.string1__)}},
    // optional float float1_ = 30;
    {::_pbi::TcParser::FastF32S2,
     {501, 23, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float1__)}},
    // optional float float2_ = 31;
    {::_pbi::TcParser::FastF32S2,
     {509, 24, 0, PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float2__)}},
  }}, {{
    33, 0, 2,
    2114, 24, 65472, 37,
    65535, 65535
  }}, {{
    // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.entry_type_), _Internal::kHasBitsOffset + 37, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // required uint32 parent = 2 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.parent_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // required uint32 serial_number = 3;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.serial_number_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 modifier_subclass = 4;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.modifier_subclass_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 stack_count = 5;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.stack_count_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 max_stack_count = 6;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.max_stack_count_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float last_applied_time = 7;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.last_applied_time_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float duration = 8 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.duration_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 caster = 9 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.caster_), _Internal::kHasBitsOffset + 40, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ability = 10 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.ability_), _Internal::kHasBitsOffset + 41, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 aura_provider_serial_number = 11;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.aura_provider_serial_number_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.aura_provider_ehandle_), _Internal::kHasBitsOffset + 42, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ability_subclass = 13;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.ability_subclass_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool bool1_ = 20;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool1__), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool bool2_ = 21;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool2__), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool bool3_ = 22;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool3__), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool bool4_ = 23;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.bool4__), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 int1_ = 25;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int1__), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 int2_ = 26;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int2__), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 int3_ = 27;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int3__), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 int4_ = 28;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.int4__), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float float1_ = 30;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float1__), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float2_ = 31;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float2__), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float3_ = 32;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float3__), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float4_ = 33;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float4__), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint64 uint1_ = 35;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.uint1__), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 uint2_ = 36;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.uint2__), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 uint3_ = 37;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.uint3__), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 uint4_ = 38;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.uint4__), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional .CMsgVector vec1_ = 40;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec1__), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector vec2_ = 41;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec2__), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector vec3_ = 42;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec3__), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector vec4_ = 43;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec4__), _Internal::kHasBitsOffset + 7, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string string1_ = 45;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.string1__), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string string2_ = 46;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.string2__), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string string3_ = 47;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.string3__), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string string4_ = 48;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.string4__), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float float5_ = 49;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float5__), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float6_ = 50;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float6__), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float7_ = 51;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float7__), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float8_ = 52;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float8__), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float9_ = 53;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float9__), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float float10_ = 54;
    {PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.float10__), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {::_pbi::TcParser::GetTable<::CMsgVector>()},
    {1, 2},
  }}, {{
    "\23\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\10\10\10\10\0\0\0\0\0\0\0\0\0\0"
    "CModifierTableEntry"
    "string1_"
    "string2_"
    "string3_"
    "string4_"
  }},
};

PROTOBUF_NOINLINE void CModifierTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CModifierTableEntry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string1__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.string2__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.string3__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.string4__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.vec1__ != nullptr);
      _impl_.vec1__->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.vec2__ != nullptr);
      _impl_.vec2__->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.vec3__ != nullptr);
      _impl_.vec3__->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.vec4__ != nullptr);
      _impl_.vec4__->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.serial_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.bool1__) -
        reinterpret_cast<char*>(&_impl_.serial_number_)) + sizeof(_impl_.bool1__));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.bool2__, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.float1__) -
        reinterpret_cast<char*>(&_impl_.bool2__)) + sizeof(_impl_.float1__));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.float2__, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.float5__) -
        reinterpret_cast<char*>(&_impl_.float2__)) + sizeof(_impl_.float5__));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.float6__, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.float10__) -
        reinterpret_cast<char*>(&_impl_.float6__)) + sizeof(_impl_.float10__));
    _impl_.entry_type_ = 1;
    _impl_.parent_ = 16777215u;
    _impl_.duration_ = -1;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.caster_ = 16777215u;
    _impl_.ability_ = 16777215u;
    _impl_.aura_provider_ehandle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CModifierTableEntry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CModifierTableEntry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_entry_type(), target);
  }

  // required uint32 parent = 2 [default = 16777215];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_parent(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 serial_number = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_serial_number(), target);
  }

  // optional uint32 modifier_subclass = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_modifier_subclass(), target);
  }

  // optional int32 stack_count = 5;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_stack_count(), target);
  }

  // optional int32 max_stack_count = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_max_stack_count(), target);
  }

  // optional float last_applied_time = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_last_applied_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float duration = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_duration(), target);
  }

  // optional uint32 caster = 9 [default = 16777215];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_caster(), target);
  }

  // optional uint32 ability = 10 [default = 16777215];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_ability(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 aura_provider_serial_number = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_aura_provider_serial_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this->_internal_aura_provider_ehandle(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ability_subclass = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this->_internal_ability_subclass(), target);
  }

  // optional bool bool1_ = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        20, this->_internal_bool1_(), target);
  }

  // optional bool bool2_ = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        21, this->_internal_bool2_(), target);
  }

  // optional bool bool3_ = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_bool3_(), target);
  }

  // optional bool bool4_ = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_bool4_(), target);
  }

  // optional int32 int1_ = 25;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        25, this->_internal_int1_(), target);
  }

  // optional int32 int2_ = 26;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this->_internal_int2_(), target);
  }

  // optional int32 int3_ = 27;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        27, this->_internal_int3_(), target);
  }

  // optional int32 int4_ = 28;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        28, this->_internal_int4_(), target);
  }

  // optional float float1_ = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        30, this->_internal_float1_(), target);
  }

  // optional float float2_ = 31;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        31, this->_internal_float2_(), target);
  }

  // optional float float3_ = 32;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        32, this->_internal_float3_(), target);
  }

  // optional float float4_ = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        33, this->_internal_float4_(), target);
  }

  // optional uint64 uint1_ = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        35, this->_internal_uint1_(), target);
  }

  // optional uint64 uint2_ = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        36, this->_internal_uint2_(), target);
  }

  // optional uint64 uint3_ = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        37, this->_internal_uint3_(), target);
  }

  // optional uint64 uint4_ = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        38, this->_internal_uint4_(), target);
  }

  // optional .CMsgVector vec1_ = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        40, *_impl_.vec1__, _impl_.vec1__->GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec2_ = 41;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        41, *_impl_.vec2__, _impl_.vec2__->GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec3_ = 42;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        42, *_impl_.vec3__, _impl_.vec3__->GetCachedSize(), target, stream);
  }

  // optional .CMsgVector vec4_ = 43;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        43, *_impl_.vec4__, _impl_.vec4__->GetCachedSize(), target, stream);
  }

  // optional string string1_ = 45;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_string1_();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CModifierTableEntry.string1_");
    target = stream->WriteStringMaybeAliased(45, _s, target);
  }

  // optional string string2_ = 46;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_string2_();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CModifierTableEntry.string2_");
    target = stream->WriteStringMaybeAliased(46, _s, target);
  }

  // optional string string3_ = 47;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_string3_();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CModifierTableEntry.string3_");
    target = stream->WriteStringMaybeAliased(47, _s, target);
  }

  // optional string string4_ = 48;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_string4_();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CModifierTableEntry.string4_");
    target = stream->WriteStringMaybeAliased(48, _s, target);
  }

  // optional float float5_ = 49;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        49, this->_internal_float5_(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float float6_ = 50;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        50, this->_internal_float6_(), target);
  }

  // optional float float7_ = 51;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        51, this->_internal_float7_(), target);
  }

  // optional float float8_ = 52;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        52, this->_internal_float8_(), target);
  }

  // optional float float9_ = 53;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        53, this->_internal_float9_(), target);
  }

  // optional float float10_ = 54;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        54, this->_internal_float10_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CModifierTableEntry)
  return target;
}

::size_t CModifierTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CModifierTableEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string string1_ = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string1_());
    }

    // optional string string2_ = 46;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string2_());
    }

    // optional string string3_ = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string3_());
    }

    // optional string string4_ = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_string4_());
    }

    // optional .CMsgVector vec1_ = 40;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vec1__);
    }

    // optional .CMsgVector vec2_ = 41;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vec2__);
    }

    // optional .CMsgVector vec3_ = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vec3__);
    }

    // optional .CMsgVector vec4_ = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vec4__);
    }

  }
  // required uint32 serial_number = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_serial_number());
  }

  if (cached_has_bits & 0x0000fe00u) {
    // optional uint32 modifier_subclass = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_modifier_subclass());
    }

    // optional int32 stack_count = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_stack_count());
    }

    // optional int32 max_stack_count = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_stack_count());
    }

    // optional float last_applied_time = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 5;
    }

    // optional int32 aura_provider_serial_number = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_aura_provider_serial_number());
    }

    // optional uint32 ability_subclass = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ability_subclass());
    }

    // optional bool bool1_ = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool bool2_ = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }

    // optional bool bool3_ = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 3;
    }

    // optional bool bool4_ = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3;
    }

    // optional int32 int1_ = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_int1_());
    }

    // optional int32 int2_ = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_int2_());
    }

    // optional int32 int3_ = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_int3_());
    }

    // optional int32 int4_ = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_int4_());
    }

    // optional float float1_ = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 6;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float float2_ = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 6;
    }

    // optional float float3_ = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 6;
    }

    // optional float float4_ = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 6;
    }

    // optional uint64 uint1_ = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_uint1_());
    }

    // optional uint64 uint2_ = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_uint2_());
    }

    // optional uint64 uint3_ = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_uint3_());
    }

    // optional uint64 uint4_ = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_uint4_());
    }

    // optional float float5_ = 49;
    if (cached_has_bits & 0x80000000u) {
      total_size += 6;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional float float6_ = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 6;
    }

    // optional float float7_ = 51;
    if (cached_has_bits & 0x00000002u) {
      total_size += 6;
    }

    // optional float float8_ = 52;
    if (cached_has_bits & 0x00000004u) {
      total_size += 6;
    }

    // optional float float9_ = 53;
    if (cached_has_bits & 0x00000008u) {
      total_size += 6;
    }

    // optional float float10_ = 54;
    if (cached_has_bits & 0x00000010u) {
      total_size += 6;
    }

  }
  if (cached_has_bits & 0x00000060u) {
    // required .MODIFIER_ENTRY_TYPE entry_type = 1 [default = MODIFIER_ENTRY_TYPE_ACTIVE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());
    }

    // required uint32 parent = 2 [default = 16777215];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_parent());
    }

  }
  // optional float duration = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    total_size += 5;
  }

  if (cached_has_bits & 0x00000700u) {
    // optional uint32 caster = 9 [default = 16777215];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_caster());
    }

    // optional uint32 ability = 10 [default = 16777215];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ability());
    }

    // optional uint32 aura_provider_ehandle = 12 [default = 16777215];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_aura_provider_ehandle());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CModifierTableEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CModifierTableEntry*>(&to_msg);
  auto& from = static_cast<const CModifierTableEntry&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CModifierTableEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string1_(from._internal_string1_());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_string2_(from._internal_string2_());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_string3_(from._internal_string3_());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_string4_(from._internal_string4_());
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.vec1__ != nullptr);
      if (_this->_impl_.vec1__ == nullptr) {
        _this->_impl_.vec1__ =
            ::google::protobuf::Message::CopyConstruct<::CMsgVector>(arena, *from._impl_.vec1__);
      } else {
        _this->_impl_.vec1__->MergeFrom(*from._impl_.vec1__);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.vec2__ != nullptr);
      if (_this->_impl_.vec2__ == nullptr) {
        _this->_impl_.vec2__ =
            ::google::protobuf::Message::CopyConstruct<::CMsgVector>(arena, *from._impl_.vec2__);
      } else {
        _this->_impl_.vec2__->MergeFrom(*from._impl_.vec2__);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.vec3__ != nullptr);
      if (_this->_impl_.vec3__ == nullptr) {
        _this->_impl_.vec3__ =
            ::google::protobuf::Message::CopyConstruct<::CMsgVector>(arena, *from._impl_.vec3__);
      } else {
        _this->_impl_.vec3__->MergeFrom(*from._impl_.vec3__);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.vec4__ != nullptr);
      if (_this->_impl_.vec4__ == nullptr) {
        _this->_impl_.vec4__ =
            ::google::protobuf::Message::CopyConstruct<::CMsgVector>(arena, *from._impl_.vec4__);
      } else {
        _this->_impl_.vec4__->MergeFrom(*from._impl_.vec4__);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.serial_number_ = from._impl_.serial_number_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.modifier_subclass_ = from._impl_.modifier_subclass_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.stack_count_ = from._impl_.stack_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.max_stack_count_ = from._impl_.max_stack_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.last_applied_time_ = from._impl_.last_applied_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.aura_provider_serial_number_ = from._impl_.aura_provider_serial_number_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ability_subclass_ = from._impl_.ability_subclass_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bool1__ = from._impl_.bool1__;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.bool2__ = from._impl_.bool2__;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.bool3__ = from._impl_.bool3__;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.bool4__ = from._impl_.bool4__;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.int1__ = from._impl_.int1__;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.int2__ = from._impl_.int2__;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.int3__ = from._impl_.int3__;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.int4__ = from._impl_.int4__;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.float1__ = from._impl_.float1__;
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.float2__ = from._impl_.float2__;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.float3__ = from._impl_.float3__;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.float4__ = from._impl_.float4__;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.uint1__ = from._impl_.uint1__;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.uint2__ = from._impl_.uint2__;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.uint3__ = from._impl_.uint3__;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.uint4__ = from._impl_.uint4__;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.float5__ = from._impl_.float5__;
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.float6__ = from._impl_.float6__;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.float7__ = from._impl_.float7__;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.float8__ = from._impl_.float8__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.float9__ = from._impl_.float9__;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.float10__ = from._impl_.float10__;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.entry_type_ = from._impl_.entry_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.parent_ = from._impl_.parent_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.caster_ = from._impl_.caster_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ability_ = from._impl_.ability_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.aura_provider_ehandle_ = from._impl_.aura_provider_ehandle_;
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CModifierTableEntry::CopyFrom(const CModifierTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CModifierTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CModifierTableEntry::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const CModifierTableEntry&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void CModifierTableEntry::InternalSwap(CModifierTableEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string1__, &other->_impl_.string1__, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string2__, &other->_impl_.string2__, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string3__, &other->_impl_.string3__, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.string4__, &other->_impl_.string4__, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.aura_provider_ehandle_)
      + sizeof(CModifierTableEntry::_impl_.aura_provider_ehandle_)
      - PROTOBUF_FIELD_OFFSET(CModifierTableEntry, _impl_.vec1__)>(
          reinterpret_cast<char*>(&_impl_.vec1__),
          reinterpret_cast<char*>(&other->_impl_.vec1__));
}

::google::protobuf::Metadata CModifierTableEntry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_base_5fmodifier_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
