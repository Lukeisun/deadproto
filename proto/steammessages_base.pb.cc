// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steammessages_base.proto
// Protobuf C++ Version: 5.27.3

#include "steammessages_base.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CPackageReservationStatus::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        reservation_country_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        packageid_{0u},
        reservation_state_{0},
        queue_position_{0},
        total_queue_size_{0},
        expired_{false},
        time_expires_{0u},
        time_reserved_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CPackageReservationStatus::CPackageReservationStatus(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CPackageReservationStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPackageReservationStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPackageReservationStatusDefaultTypeInternal() {}
  union {
    CPackageReservationStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPackageReservationStatusDefaultTypeInternal _CPackageReservationStatus_default_instance_;

inline constexpr CMsgProtobufWrapped::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR CMsgProtobufWrapped::CMsgProtobufWrapped(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgProtobufWrappedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProtobufWrappedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProtobufWrappedDefaultTypeInternal() {}
  union {
    CMsgProtobufWrapped _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProtobufWrappedDefaultTypeInternal _CMsgProtobufWrapped_default_instance_;

inline constexpr CMsgProtoBufHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        forward_to_sysid_{},
        target_job_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        debug_source_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        steamid_{::uint64_t{0u}},
        client_sessionid_{0},
        routing_appid_{0u},
        auth_account_flags_{0u},
        publisher_group_id_{0u},
        trace_tag_{::uint64_t{0u}},
        sysid_{0u},
        token_source_{0u},
        seq_num_{0},
        admin_spoofing_user_{false},
        is_from_external_source_{false},
        webapi_key_id_{0u},
        cm_sysid_{0u},
        launcher_type_{0u},
        realm_{0u},
        timeout_ms_{-1},
        jobid_source_{::uint64_t{18446744073709551615u}},
        jobid_target_{::uint64_t{18446744073709551615u}},
        eresult_{2},
        transport_error_{1},
        messageid_{::uint64_t{18446744073709551615u}},
        ip_addr_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgProtoBufHeader::CMsgProtoBufHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgProtoBufHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgProtoBufHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgProtoBufHeaderDefaultTypeInternal() {}
  union {
    CMsgProtoBufHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;

inline constexpr CMsgMulti::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        size_unzipped_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgMulti::CMsgMulti(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgMultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMultiDefaultTypeInternal() {}
  union {
    CMsgMulti _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMultiDefaultTypeInternal _CMsgMulti_default_instance_;

inline constexpr CMsgKeyValuePair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR CMsgKeyValuePair::CMsgKeyValuePair(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgKeyValuePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgKeyValuePairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgKeyValuePairDefaultTypeInternal() {}
  union {
    CMsgKeyValuePair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgKeyValuePairDefaultTypeInternal _CMsgKeyValuePair_default_instance_;

inline constexpr CMsgIPAddress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgIPAddress::CMsgIPAddress(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgIPAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgIPAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgIPAddressDefaultTypeInternal() {}
  union {
    CMsgIPAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgIPAddressDefaultTypeInternal _CMsgIPAddress_default_instance_;

inline constexpr CMsgAuthTicket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ticket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        steamid_{::uint64_t{0u}},
        estate_{0u},
        h_steam_pipe_{0u},
        gameid_{::uint64_t{0u}},
        ticket_crc_{0u},
        eresult_{2u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgAuthTicket::CMsgAuthTicket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgAuthTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAuthTicketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAuthTicketDefaultTypeInternal() {}
  union {
    CMsgAuthTicket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAuthTicketDefaultTypeInternal _CMsgAuthTicket_default_instance_;

inline constexpr CMsgAppRights::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        edit_info_{false},
        publish_{false},
        view_error_data_{false},
        download_{false},
        upload_cdkeys_{false},
        generate_cdkeys_{false},
        view_financials_{false},
        manage_ceg_{false},
        manage_signing_{false},
        manage_cdkeys_{false},
        edit_marketing_{false},
        economy_support_{false},
        economy_support_supervisor_{false},
        manage_pricing_{false},
        broadcast_live_{false},
        view_marketing_traffic_{false},
        edit_store_display_content_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgAppRights::CMsgAppRights(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgAppRightsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAppRightsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAppRightsDefaultTypeInternal() {}
  union {
    CMsgAppRights _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAppRightsDefaultTypeInternal _CMsgAppRights_default_instance_;

inline constexpr CLocalizationToken::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        localized_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        language_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CLocalizationToken::CLocalizationToken(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CLocalizationTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CLocalizationTokenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CLocalizationTokenDefaultTypeInternal() {}
  union {
    CLocalizationToken _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CLocalizationTokenDefaultTypeInternal _CLocalizationToken_default_instance_;

inline constexpr CCuratorPreferences::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tagids_curated_{},
        tagids_filtered_{},
        website_title_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        website_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        discussion_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        supported_languages_{0u},
        platform_windows_{false},
        platform_mac_{false},
        platform_linux_{false},
        vr_content_{false},
        timestamp_updated_{0u},
        adult_content_violence_{false},
        adult_content_sex_{false},
        show_broadcast_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CCuratorPreferences::CCuratorPreferences(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CCuratorPreferencesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCuratorPreferencesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCuratorPreferencesDefaultTypeInternal() {}
  union {
    CCuratorPreferences _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCuratorPreferencesDefaultTypeInternal _CCuratorPreferences_default_instance_;

inline constexpr CCommunity_ClanAnnouncementInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tags_{},
        headline_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gid_{::uint64_t{0u}},
        clanid_{::uint64_t{0u}},
        posterid_{::uint64_t{0u}},
        posttime_{0u},
        updatetime_{0u},
        commentcount_{0},
        language_{0},
        forum_topic_id_{::uint64_t{0u}},
        hidden_{false},
        voteupcount_{0},
        event_gid_{::uint64_t{0u}},
        votedowncount_{0},
        ban_check_result_{static_cast< ::EBanContentCheckResult >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CCommunity_ClanAnnouncementInfo::CCommunity_ClanAnnouncementInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CCommunity_ClanAnnouncementInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCommunity_ClanAnnouncementInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCommunity_ClanAnnouncementInfoDefaultTypeInternal() {}
  union {
    CCommunity_ClanAnnouncementInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCommunity_ClanAnnouncementInfoDefaultTypeInternal _CCommunity_ClanAnnouncementInfo_default_instance_;

inline constexpr CClanEventUserNewsTuple::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        event_gid_{::uint64_t{0u}},
        clanid_{0u},
        rtime_start_{0u},
        announcement_gid_{::uint64_t{0u}},
        rtime_end_{0u},
        priority_score_{0u},
        type_{0u},
        clamp_range_slot_{0u},
        appid_{0u},
        rtime32_last_modified_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CClanEventUserNewsTuple::CClanEventUserNewsTuple(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CClanEventUserNewsTupleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClanEventUserNewsTupleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClanEventUserNewsTupleDefaultTypeInternal() {}
  union {
    CClanEventUserNewsTuple _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClanEventUserNewsTupleDefaultTypeInternal _CClanEventUserNewsTuple_default_instance_;

inline constexpr CCDDBAppDetailCommon::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        friendly_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        propagation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        appid_{0u},
        tool_{false},
        demo_{false},
        media_{false},
        community_visible_stats_{false},
        has_adult_content_{false},
        is_visible_in_steam_china_{false},
        app_type_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CCDDBAppDetailCommon::CCDDBAppDetailCommon(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CCDDBAppDetailCommonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCDDBAppDetailCommonDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCDDBAppDetailCommonDefaultTypeInternal() {}
  union {
    CCDDBAppDetailCommon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCDDBAppDetailCommonDefaultTypeInternal _CCDDBAppDetailCommon_default_instance_;

inline constexpr CBilling_Address::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        first_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address2_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        city_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        us_state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        postcode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        phone_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zip_plus4_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CBilling_Address::CBilling_Address(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CBilling_AddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CBilling_AddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CBilling_AddressDefaultTypeInternal() {}
  union {
    CBilling_Address _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CBilling_AddressDefaultTypeInternal _CBilling_Address_default_instance_;

inline constexpr CMsgKeyValueSet::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pairs_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgKeyValueSet::CMsgKeyValueSet(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgKeyValueSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgKeyValueSetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgKeyValueSetDefaultTypeInternal() {}
  union {
    CMsgKeyValueSet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgKeyValueSetDefaultTypeInternal _CMsgKeyValueSet_default_instance_;

inline constexpr CMsgIPAddressBucket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        original_ip_address_{nullptr},
        bucket_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgIPAddressBucket::CMsgIPAddressBucket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CMsgIPAddressBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgIPAddressBucketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgIPAddressBucketDefaultTypeInternal() {}
  union {
    CMsgIPAddressBucket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgIPAddressBucketDefaultTypeInternal _CMsgIPAddressBucket_default_instance_;

inline constexpr CClanMatchEventByRange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        events_{},
        rtime_before_{0u},
        rtime_after_{0u},
        qualified_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CClanMatchEventByRange::CClanMatchEventByRange(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CClanMatchEventByRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClanMatchEventByRangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClanMatchEventByRangeDefaultTypeInternal() {}
  union {
    CClanMatchEventByRange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClanMatchEventByRangeDefaultTypeInternal _CClanMatchEventByRange_default_instance_;

inline constexpr CClanEventData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        referenced_appids_{},
        event_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        server_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        server_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_notes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        jsondata_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        build_branch_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        announcement_body_{nullptr},
        gid_{::uint64_t{0u}},
        clan_steamid_{::uint64_t{0u}},
        appid_{0u},
        rtime32_start_time_{0u},
        rtime32_end_time_{0u},
        comment_count_{0},
        creator_steamid_{::uint64_t{0u}},
        last_update_steamid_{::uint64_t{0u}},
        published_{false},
        hidden_{false},
        rtime32_visibility_start_{0u},
        rtime32_visibility_end_{0u},
        broadcaster_accountid_{0u},
        follower_count_{0u},
        ignore_count_{0u},
        forum_topic_id_{::uint64_t{0u}},
        news_post_gid_{::uint64_t{0u}},
        rtime32_last_modified_{0u},
        rtime_mod_reviewed_{0u},
        featured_app_tagid_{0u},
        build_id_{0u},
        event_type_{static_cast< ::EProtoClanEventType >(1)} {}

template <typename>
PROTOBUF_CONSTEXPR CClanEventData::CClanEventData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CClanEventDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CClanEventDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CClanEventDataDefaultTypeInternal() {}
  union {
    CClanEventData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CClanEventDataDefaultTypeInternal _CClanEventData_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_steammessages_5fbase_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_steammessages_5fbase_2eproto = nullptr;
const ::uint32_t
    TableStruct_steammessages_5fbase_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddress, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddress, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddress, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddressBucket, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddressBucket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddressBucket, _impl_.original_ip_address_),
        PROTOBUF_FIELD_OFFSET(::CMsgIPAddressBucket, _impl_.bucket_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.steamid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.client_sessionid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.routing_appid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.jobid_source_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.jobid_target_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.target_job_name_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.seq_num_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.eresult_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.auth_account_flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.token_source_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.admin_spoofing_user_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.transport_error_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.messageid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.publisher_group_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.sysid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.trace_tag_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.webapi_key_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.is_from_external_source_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.forward_to_sysid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.cm_sysid_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.launcher_type_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.realm_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.timeout_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.debug_source_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_.ip_addr_),
        3,
        4,
        5,
        19,
        20,
        0,
        11,
        21,
        1,
        6,
        10,
        12,
        22,
        23,
        7,
        9,
        8,
        14,
        13,
        ~0u,
        15,
        16,
        17,
        18,
        2,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CMsgMulti, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgMulti, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgMulti, _impl_.size_unzipped_),
        PROTOBUF_FIELD_OFFSET(::CMsgMulti, _impl_.message_body_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgProtobufWrapped, _impl_.message_body_),
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.estate_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.eresult_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.steamid_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.gameid_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.h_steam_pipe_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.ticket_crc_),
        PROTOBUF_FIELD_OFFSET(::CMsgAuthTicket, _impl_.ticket_),
        2,
        6,
        1,
        4,
        3,
        5,
        0,
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.icon_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.tool_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.demo_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.media_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.community_visible_stats_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.friendly_name_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.propagation_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.has_adult_content_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.is_visible_in_steam_china_),
        PROTOBUF_FIELD_OFFSET(::CCDDBAppDetailCommon, _impl_.app_type_),
        4,
        0,
        1,
        5,
        6,
        7,
        8,
        2,
        3,
        9,
        10,
        11,
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.edit_info_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.publish_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.view_error_data_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.download_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.upload_cdkeys_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.generate_cdkeys_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.view_financials_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.manage_ceg_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.manage_signing_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.manage_cdkeys_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.edit_marketing_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.economy_support_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.economy_support_supervisor_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.manage_pricing_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.broadcast_live_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.view_marketing_traffic_),
        PROTOBUF_FIELD_OFFSET(::CMsgAppRights, _impl_.edit_store_display_content_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.supported_languages_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.platform_windows_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.platform_mac_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.platform_linux_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.vr_content_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.adult_content_violence_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.adult_content_sex_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.timestamp_updated_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.tagids_curated_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.tagids_filtered_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.website_title_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.website_url_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.discussion_url_),
        PROTOBUF_FIELD_OFFSET(::CCuratorPreferences, _impl_.show_broadcast_),
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        8,
        ~0u,
        ~0u,
        0,
        1,
        2,
        11,
        PROTOBUF_FIELD_OFFSET(::CLocalizationToken, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CLocalizationToken, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CLocalizationToken, _impl_.language_),
        PROTOBUF_FIELD_OFFSET(::CLocalizationToken, _impl_.localized_string_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.clanid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.event_gid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.announcement_gid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.rtime_start_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.rtime_end_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.priority_score_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.clamp_range_slot_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventUserNewsTuple, _impl_.rtime32_last_modified_),
        1,
        0,
        3,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _impl_.rtime_before_),
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _impl_.rtime_after_),
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _impl_.qualified_),
        PROTOBUF_FIELD_OFFSET(::CClanMatchEventByRange, _impl_.events_),
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.gid_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.clanid_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.posterid_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.headline_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.posttime_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.updatetime_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.commentcount_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.tags_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.language_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.hidden_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.forum_topic_id_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.event_gid_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.voteupcount_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.votedowncount_),
        PROTOBUF_FIELD_OFFSET(::CCommunity_ClanAnnouncementInfo, _impl_.ban_check_result_),
        2,
        3,
        4,
        0,
        5,
        6,
        1,
        7,
        ~0u,
        8,
        10,
        9,
        12,
        11,
        13,
        14,
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.gid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.clan_steamid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.event_name_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.event_type_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.server_address_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.server_password_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime32_start_time_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime32_end_time_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.comment_count_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.creator_steamid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.last_update_steamid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.event_notes_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.jsondata_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.announcement_body_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.published_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.hidden_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime32_visibility_start_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime32_visibility_end_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.broadcaster_accountid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.follower_count_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.ignore_count_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.forum_topic_id_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime32_last_modified_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.news_post_gid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.rtime_mod_reviewed_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.featured_app_tagid_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.referenced_appids_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.build_id_),
        PROTOBUF_FIELD_OFFSET(::CClanEventData, _impl_.build_branch_),
        7,
        8,
        0,
        28,
        9,
        1,
        2,
        10,
        11,
        12,
        13,
        14,
        3,
        4,
        6,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        23,
        25,
        26,
        ~0u,
        27,
        5,
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.first_name_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.last_name_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.address1_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.address2_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.city_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.us_state_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.country_code_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.postcode_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.zip_plus4_),
        PROTOBUF_FIELD_OFFSET(::CBilling_Address, _impl_.phone_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        8,
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.packageid_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.reservation_state_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.queue_position_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.total_queue_size_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.reservation_country_code_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.expired_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.time_expires_),
        PROTOBUF_FIELD_OFFSET(::CPackageReservationStatus, _impl_.time_reserved_),
        1,
        2,
        3,
        4,
        0,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValuePair, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValuePair, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValuePair, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValuePair, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValueSet, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgKeyValueSet, _impl_.pairs_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CMsgIPAddress)},
        {11, 21, -1, sizeof(::CMsgIPAddressBucket)},
        {23, 59, -1, sizeof(::CMsgProtoBufHeader)},
        {86, 96, -1, sizeof(::CMsgMulti)},
        {98, 107, -1, sizeof(::CMsgProtobufWrapped)},
        {108, 123, -1, sizeof(::CMsgAuthTicket)},
        {130, 150, -1, sizeof(::CCDDBAppDetailCommon)},
        {162, 187, -1, sizeof(::CMsgAppRights)},
        {204, 226, -1, sizeof(::CCuratorPreferences)},
        {240, 250, -1, sizeof(::CLocalizationToken)},
        {252, 270, -1, sizeof(::CClanEventUserNewsTuple)},
        {280, 292, -1, sizeof(::CClanMatchEventByRange)},
        {296, 320, -1, sizeof(::CCommunity_ClanAnnouncementInfo)},
        {336, 374, -1, sizeof(::CClanEventData)},
        {404, 422, -1, sizeof(::CBilling_Address)},
        {432, 448, -1, sizeof(::CPackageReservationStatus)},
        {456, 466, -1, sizeof(::CMsgKeyValuePair)},
        {468, -1, -1, sizeof(::CMsgKeyValueSet)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_CMsgIPAddress_default_instance_._instance,
    &::_CMsgIPAddressBucket_default_instance_._instance,
    &::_CMsgProtoBufHeader_default_instance_._instance,
    &::_CMsgMulti_default_instance_._instance,
    &::_CMsgProtobufWrapped_default_instance_._instance,
    &::_CMsgAuthTicket_default_instance_._instance,
    &::_CCDDBAppDetailCommon_default_instance_._instance,
    &::_CMsgAppRights_default_instance_._instance,
    &::_CCuratorPreferences_default_instance_._instance,
    &::_CLocalizationToken_default_instance_._instance,
    &::_CClanEventUserNewsTuple_default_instance_._instance,
    &::_CClanMatchEventByRange_default_instance_._instance,
    &::_CCommunity_ClanAnnouncementInfo_default_instance_._instance,
    &::_CClanEventData_default_instance_._instance,
    &::_CBilling_Address_default_instance_._instance,
    &::_CPackageReservationStatus_default_instance_._instance,
    &::_CMsgKeyValuePair_default_instance_._instance,
    &::_CMsgKeyValueSet_default_instance_._instance,
};
const char descriptor_table_protodef_steammessages_5fbase_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\030steammessages_base.proto\032 google/proto"
    "buf/descriptor.proto\"1\n\rCMsgIPAddress\022\014\n"
    "\002v4\030\001 \001(\007H\000\022\014\n\002v6\030\002 \001(\014H\000B\004\n\002ip\"R\n\023CMsgI"
    "PAddressBucket\022+\n\023original_ip_address\030\001 "
    "\001(\0132\016.CMsgIPAddress\022\016\n\006bucket\030\002 \001(\006\"\275\005\n\022"
    "CMsgProtoBufHeader\022\017\n\007steamid\030\001 \001(\006\022\030\n\020c"
    "lient_sessionid\030\002 \001(\005\022\025\n\rrouting_appid\030\003"
    " \001(\r\022*\n\014jobid_source\030\n \001(\006:\024184467440737"
    "09551615\022*\n\014jobid_target\030\013 \001(\006:\02418446744"
    "073709551615\022\027\n\017target_job_name\030\014 \001(\t\022\017\n"
    "\007seq_num\030\030 \001(\005\022\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rer"
    "ror_message\030\016 \001(\t\022\032\n\022auth_account_flags\030"
    "\020 \001(\r\022\024\n\014token_source\030\026 \001(\r\022\033\n\023admin_spo"
    "ofing_user\030\027 \001(\010\022\032\n\017transport_error\030\021 \001("
    "\005:\0011\022\'\n\tmessageid\030\022 \001(\004:\024184467440737095"
    "51615\022\032\n\022publisher_group_id\030\023 \001(\r\022\r\n\005sys"
    "id\030\024 \001(\r\022\021\n\ttrace_tag\030\025 \001(\004\022\025\n\rwebapi_ke"
    "y_id\030\031 \001(\r\022\037\n\027is_from_external_source\030\032 "
    "\001(\010\022\030\n\020forward_to_sysid\030\033 \003(\r\022\020\n\010cm_sysi"
    "d\030\034 \001(\r\022\030\n\rlauncher_type\030\037 \001(\r:\0010\022\020\n\005rea"
    "lm\030  \001(\r:\0010\022\026\n\ntimeout_ms\030! \001(\005:\002-1\022\024\n\014d"
    "ebug_source\030\" \001(\t\022\014\n\002ip\030\017 \001(\rH\000\022\017\n\005ip_v6"
    "\030\035 \001(\014H\000B\t\n\007ip_addr\"8\n\tCMsgMulti\022\025\n\rsize"
    "_unzipped\030\001 \001(\r\022\024\n\014message_body\030\002 \001(\014\"+\n"
    "\023CMsgProtobufWrapped\022\024\n\014message_body\030\001 \001"
    "(\014\"\217\001\n\016CMsgAuthTicket\022\016\n\006estate\030\001 \001(\r\022\022\n"
    "\007eresult\030\002 \001(\r:\0012\022\017\n\007steamid\030\003 \001(\006\022\016\n\006ga"
    "meid\030\004 \001(\006\022\024\n\014h_steam_pipe\030\005 \001(\r\022\022\n\ntick"
    "et_crc\030\006 \001(\r\022\016\n\006ticket\030\007 \001(\014\"\211\002\n\024CCDDBAp"
    "pDetailCommon\022\r\n\005appid\030\001 \001(\r\022\014\n\004name\030\002 \001"
    "(\t\022\014\n\004icon\030\003 \001(\t\022\014\n\004tool\030\006 \001(\010\022\014\n\004demo\030\007"
    " \001(\010\022\r\n\005media\030\010 \001(\010\022\037\n\027community_visible"
    "_stats\030\t \001(\010\022\025\n\rfriendly_name\030\n \001(\t\022\023\n\013p"
    "ropagation\030\013 \001(\t\022\031\n\021has_adult_content\030\014 "
    "\001(\010\022!\n\031is_visible_in_steam_china\030\r \001(\010\022\020"
    "\n\010app_type\030\016 \001(\r\"\263\003\n\rCMsgAppRights\022\021\n\ted"
    "it_info\030\001 \001(\010\022\017\n\007publish\030\002 \001(\010\022\027\n\017view_e"
    "rror_data\030\003 \001(\010\022\020\n\010download\030\004 \001(\010\022\025\n\rupl"
    "oad_cdkeys\030\005 \001(\010\022\027\n\017generate_cdkeys\030\006 \001("
    "\010\022\027\n\017view_financials\030\007 \001(\010\022\022\n\nmanage_ceg"
    "\030\010 \001(\010\022\026\n\016manage_signing\030\t \001(\010\022\025\n\rmanage"
    "_cdkeys\030\n \001(\010\022\026\n\016edit_marketing\030\013 \001(\010\022\027\n"
    "\017economy_support\030\014 \001(\010\022\"\n\032economy_suppor"
    "t_supervisor\030\r \001(\010\022\026\n\016manage_pricing\030\016 \001"
    "(\010\022\026\n\016broadcast_live\030\017 \001(\010\022\036\n\026view_marke"
    "ting_traffic\030\020 \001(\010\022\"\n\032edit_store_display"
    "_content\030\021 \001(\010\"\361\002\n\023CCuratorPreferences\022\033"
    "\n\023supported_languages\030\001 \001(\r\022\030\n\020platform_"
    "windows\030\002 \001(\010\022\024\n\014platform_mac\030\003 \001(\010\022\026\n\016p"
    "latform_linux\030\004 \001(\010\022\022\n\nvr_content\030\005 \001(\010\022"
    "\036\n\026adult_content_violence\030\006 \001(\010\022\031\n\021adult"
    "_content_sex\030\007 \001(\010\022\031\n\021timestamp_updated\030"
    "\010 \001(\r\022\026\n\016tagids_curated\030\t \003(\r\022\027\n\017tagids_"
    "filtered\030\n \003(\r\022\025\n\rwebsite_title\030\013 \001(\t\022\023\n"
    "\013website_url\030\014 \001(\t\022\026\n\016discussion_url\030\r \001"
    "(\t\022\026\n\016show_broadcast\030\016 \001(\010\"@\n\022CLocalizat"
    "ionToken\022\020\n\010language\030\001 \001(\r\022\030\n\020localized_"
    "string\030\002 \001(\t\"\354\001\n\027CClanEventUserNewsTuple"
    "\022\016\n\006clanid\030\001 \001(\r\022\021\n\tevent_gid\030\002 \001(\006\022\030\n\020a"
    "nnouncement_gid\030\003 \001(\006\022\023\n\013rtime_start\030\004 \001"
    "(\r\022\021\n\trtime_end\030\005 \001(\r\022\026\n\016priority_score\030"
    "\006 \001(\r\022\014\n\004type\030\007 \001(\r\022\030\n\020clamp_range_slot\030"
    "\010 \001(\r\022\r\n\005appid\030\t \001(\r\022\035\n\025rtime32_last_mod"
    "ified\030\n \001(\r\"\200\001\n\026CClanMatchEventByRange\022\024"
    "\n\014rtime_before\030\001 \001(\r\022\023\n\013rtime_after\030\002 \001("
    "\r\022\021\n\tqualified\030\003 \001(\r\022(\n\006events\030\004 \003(\0132\030.C"
    "ClanEventUserNewsTuple\"\213\003\n\037CCommunity_Cl"
    "anAnnouncementInfo\022\013\n\003gid\030\001 \001(\004\022\016\n\006clani"
    "d\030\002 \001(\004\022\020\n\010posterid\030\003 \001(\004\022\020\n\010headline\030\004 "
    "\001(\t\022\020\n\010posttime\030\005 \001(\r\022\022\n\nupdatetime\030\006 \001("
    "\r\022\014\n\004body\030\007 \001(\t\022\024\n\014commentcount\030\010 \001(\005\022\014\n"
    "\004tags\030\t \003(\t\022\020\n\010language\030\n \001(\005\022\016\n\006hidden\030"
    "\013 \001(\010\022\026\n\016forum_topic_id\030\014 \001(\006\022\021\n\tevent_g"
    "id\030\r \001(\006\022\023\n\013voteupcount\030\016 \001(\005\022\025\n\rvotedow"
    "ncount\030\017 \001(\005\022V\n\020ban_check_result\030\020 \001(\0162\027"
    ".EBanContentCheckResult:#k_EBanContentCh"
    "eckResult_NotScanned\"\246\006\n\016CClanEventData\022"
    "\013\n\003gid\030\001 \001(\006\022\024\n\014clan_steamid\030\002 \001(\006\022\022\n\nev"
    "ent_name\030\003 \001(\t\022;\n\nevent_type\030\004 \001(\0162\024.EPr"
    "otoClanEventType:\021k_EClanOtherEvent\022\r\n\005a"
    "ppid\030\005 \001(\r\022\026\n\016server_address\030\006 \001(\t\022\027\n\017se"
    "rver_password\030\007 \001(\t\022\032\n\022rtime32_start_tim"
    "e\030\010 \001(\r\022\030\n\020rtime32_end_time\030\t \001(\r\022\025\n\rcom"
    "ment_count\030\n \001(\005\022\027\n\017creator_steamid\030\013 \001("
    "\006\022\033\n\023last_update_steamid\030\014 \001(\006\022\023\n\013event_"
    "notes\030\r \001(\t\022\020\n\010jsondata\030\016 \001(\t\022;\n\021announc"
    "ement_body\030\017 \001(\0132 .CCommunity_ClanAnnoun"
    "cementInfo\022\021\n\tpublished\030\020 \001(\010\022\016\n\006hidden\030"
    "\021 \001(\010\022 \n\030rtime32_visibility_start\030\022 \001(\r\022"
    "\036\n\026rtime32_visibility_end\030\023 \001(\r\022\035\n\025broad"
    "caster_accountid\030\024 \001(\r\022\026\n\016follower_count"
    "\030\025 \001(\r\022\024\n\014ignore_count\030\026 \001(\r\022\026\n\016forum_to"
    "pic_id\030\027 \001(\006\022\035\n\025rtime32_last_modified\030\030 "
    "\001(\r\022\025\n\rnews_post_gid\030\031 \001(\006\022\032\n\022rtime_mod_"
    "reviewed\030\032 \001(\r\022\032\n\022featured_app_tagid\030\033 \001"
    "(\r\022\031\n\021referenced_appids\030\034 \003(\r\022\020\n\010build_i"
    "d\030\035 \001(\r\022\024\n\014build_branch\030\036 \001(\t\"\307\001\n\020CBilli"
    "ng_Address\022\022\n\nfirst_name\030\001 \001(\t\022\021\n\tlast_n"
    "ame\030\002 \001(\t\022\020\n\010address1\030\003 \001(\t\022\020\n\010address2\030"
    "\004 \001(\t\022\014\n\004city\030\005 \001(\t\022\020\n\010us_state\030\006 \001(\t\022\024\n"
    "\014country_code\030\007 \001(\t\022\020\n\010postcode\030\010 \001(\t\022\021\n"
    "\tzip_plus4\030\t \001(\005\022\r\n\005phone\030\n \001(\t\"\333\001\n\031CPac"
    "kageReservationStatus\022\021\n\tpackageid\030\001 \001(\r"
    "\022\031\n\021reservation_state\030\002 \001(\005\022\026\n\016queue_pos"
    "ition\030\003 \001(\005\022\030\n\020total_queue_size\030\004 \001(\005\022 \n"
    "\030reservation_country_code\030\005 \001(\t\022\017\n\007expir"
    "ed\030\006 \001(\010\022\024\n\014time_expires\030\007 \001(\r\022\025\n\rtime_r"
    "eserved\030\010 \001(\r\"/\n\020CMsgKeyValuePair\022\014\n\004nam"
    "e\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"3\n\017CMsgKeyValueSe"
    "t\022 \n\005pairs\030\001 \003(\0132\021.CMsgKeyValuePair*\330\002\n\026"
    "EBanContentCheckResult\022\'\n#k_EBanContentC"
    "heckResult_NotScanned\020\000\022\"\n\036k_EBanContent"
    "CheckResult_Reset\020\001\022*\n&k_EBanContentChec"
    "kResult_NeedsChecking\020\002\022)\n%k_EBanContent"
    "CheckResult_VeryUnlikely\020\005\022%\n!k_EBanCont"
    "entCheckResult_Unlikely\020\036\022%\n!k_EBanConte"
    "ntCheckResult_Possible\0202\022#\n\037k_EBanConten"
    "tCheckResult_Likely\020K\022\'\n#k_EBanContentCh"
    "eckResult_VeryLikely\020d*\353\007\n\023EProtoClanEve"
    "ntType\022\025\n\021k_EClanOtherEvent\020\001\022\024\n\020k_EClan"
    "GameEvent\020\002\022\025\n\021k_EClanPartyEvent\020\003\022\027\n\023k_"
    "EClanMeetingEvent\020\004\022\034\n\030k_EClanSpecialCau"
    "seEvent\020\005\022\034\n\030k_EClanMusicAndArtsEvent\020\006\022"
    "\026\n\022k_EClanSportsEvent\020\007\022\024\n\020k_EClanTripEv"
    "ent\020\010\022\024\n\020k_EClanChatEvent\020\t\022\033\n\027k_EClanGa"
    "meReleaseEvent\020\n\022\031\n\025k_EClanBroadcastEven"
    "t\020\013\022\033\n\027k_EClanSmallUpdateEvent\020\014\022&\n\"k_EC"
    "lanPreAnnounceMajorUpdateEvent\020\r\022\033\n\027k_EC"
    "lanMajorUpdateEvent\020\016\022\032\n\026k_EClanDLCRelea"
    "seEvent\020\017\022\035\n\031k_EClanFutureReleaseEvent\020\020"
    "\022&\n\"k_EClanESportTournamentStreamEvent\020\021"
    "\022\031\n\025k_EClanDevStreamEvent\020\022\022\034\n\030k_EClanFa"
    "mousStreamEvent\020\023\022\031\n\025k_EClanGameSalesEve"
    "nt\020\024\022\035\n\031k_EClanGameItemSalesEvent\020\025\022\035\n\031k"
    "_EClanInGameBonusXPEvent\020\026\022\032\n\026k_EClanInG"
    "ameLootEvent\020\027\022\033\n\027k_EClanInGamePerksEven"
    "t\020\030\022\037\n\033k_EClanInGameChallengeEvent\020\031\022\035\n\031"
    "k_EClanInGameContestEvent\020\032\022\023\n\017k_EClanIR"
    "LEvent\020\033\022\024\n\020k_EClanNewsEvent\020\034\022\033\n\027k_ECla"
    "nBetaReleaseEvent\020\035\022$\n k_EClanInGameCont"
    "entReleaseEvent\020\036\022\024\n\020k_EClanFreeTrial\020\037\022"
    "\030\n\024k_EClanSeasonRelease\020 \022\027\n\023k_EClanSeas"
    "onUpdate\020!\022\031\n\025k_EClanCrosspostEvent\020\"\022\035\n"
    "\031k_EClanInGameEventGeneral\020#*\201\001\n\034Partner"
    "EventNotificationType\022\021\n\rk_EEventStart\020\000"
    "\022\032\n\026k_EEventBroadcastStart\020\001\022\026\n\022k_EEvent"
    "MatchStart\020\002\022\032\n\026k_EEventPartnerMaxType\020\003"
    ":A\n\022msgpool_soft_limit\022\037.google.protobuf"
    ".MessageOptions\030\320\206\003 \001(\005:\00232:B\n\022msgpool_h"
    "ard_limit\022\037.google.protobuf.MessageOptio"
    "ns\030\321\206\003 \001(\005:\003384:C\n\024force_php_generation\022"
    "\034.google.protobuf.FileOptions\030\320\206\003 \001(\010:\005f"
    "alse:H\n\030php_output_always_number\022\035.googl"
    "e.protobuf.FieldOptions\030\344\206\003 \001(\010:\005false:J"
    "\n\032allow_field_named_steam_id\022\035.google.pr"
    "otobuf.FieldOptions\030\350\206\003 \001(\010:\005falseB\tH\001\200\001"
    "\001\200\265\030\001"
};
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fbase_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_steammessages_5fbase_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steammessages_5fbase_2eproto = {
    false,
    false,
    6245,
    descriptor_table_protodef_steammessages_5fbase_2eproto,
    "steammessages_base.proto",
    &descriptor_table_steammessages_5fbase_2eproto_once,
    descriptor_table_steammessages_5fbase_2eproto_deps,
    1,
    18,
    schemas,
    file_default_instances,
    TableStruct_steammessages_5fbase_2eproto::offsets,
    file_level_enum_descriptors_steammessages_5fbase_2eproto,
    file_level_service_descriptors_steammessages_5fbase_2eproto,
};
const ::google::protobuf::EnumDescriptor* EBanContentCheckResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steammessages_5fbase_2eproto);
  return file_level_enum_descriptors_steammessages_5fbase_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EBanContentCheckResult_internal_data_[] = {
    196608u, 128u, 134217732u, 32768u, 256u, 2u, };
bool EBanContentCheckResult_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, EBanContentCheckResult_internal_data_);
}
const ::google::protobuf::EnumDescriptor* EProtoClanEventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steammessages_5fbase_2eproto);
  return file_level_enum_descriptors_steammessages_5fbase_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t EProtoClanEventType_internal_data_[] = {
    2293761u, 0u, };
bool EProtoClanEventType_IsValid(int value) {
  return 1 <= value && value <= 35;
}
const ::google::protobuf::EnumDescriptor* PartnerEventNotificationType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steammessages_5fbase_2eproto);
  return file_level_enum_descriptors_steammessages_5fbase_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t PartnerEventNotificationType_internal_data_[] = {
    262144u, 0u, };
bool PartnerEventNotificationType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class CMsgIPAddress::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::CMsgIPAddress, _impl_._oneof_case_);
};

CMsgIPAddress::CMsgIPAddress(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgIPAddress)
}
inline PROTOBUF_NDEBUG_INLINE CMsgIPAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgIPAddress& from_msg)
      : ip_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

CMsgIPAddress::CMsgIPAddress(
    ::google::protobuf::Arena* arena,
    const CMsgIPAddress& from)
    : ::google::protobuf::Message(arena) {
  CMsgIPAddress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (ip_case()) {
    case IP_NOT_SET:
      break;
      case kV4:
        _impl_.ip_.v4_ = from._impl_.ip_.v4_;
        break;
      case kV6:
        new (&_impl_.ip_.v6_) decltype(_impl_.ip_.v6_){arena, from._impl_.ip_.v6_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:CMsgIPAddress)
}
inline PROTOBUF_NDEBUG_INLINE CMsgIPAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void CMsgIPAddress::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgIPAddress::~CMsgIPAddress() {
  // @@protoc_insertion_point(destructor:CMsgIPAddress)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgIPAddress::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_ip()) {
    clear_ip();
  }
  _impl_.~Impl_();
}

void CMsgIPAddress::clear_ip() {
// @@protoc_insertion_point(one_of_clear_start:CMsgIPAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (ip_case()) {
    case kV4: {
      // No need to clear
      break;
    }
    case kV6: {
      _impl_.ip_.v6_.Destroy();
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IP_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
CMsgIPAddress::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgIPAddress, _impl_._cached_size_),
              false,
          },
          &CMsgIPAddress::MergeImpl,
          &CMsgIPAddress::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 0, 2> CMsgIPAddress::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgIPAddress_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgIPAddress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed32 v4 = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgIPAddress, _impl_.ip_.v4_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kFixed32)},
    // bytes v6 = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgIPAddress, _impl_.ip_.v6_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CMsgIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgIPAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ip();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgIPAddress::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgIPAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (ip_case()) {
    case kV4: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          1, this->_internal_v4(), target);
      break;
    }
    case kV6: {
      const std::string& _s = this->_internal_v6();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgIPAddress)
  return target;
}

::size_t CMsgIPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgIPAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ip_case()) {
    // fixed32 v4 = 1;
    case kV4: {
      total_size += 5;
      break;
    }
    // bytes v6 = 2;
    case kV6: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_v6());
      break;
    }
    case IP_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgIPAddress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgIPAddress*>(&to_msg);
  auto& from = static_cast<const CMsgIPAddress&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgIPAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_ip();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kV4: {
        _this->_impl_.ip_.v4_ = from._impl_.ip_.v4_;
        break;
      }
      case kV6: {
        if (oneof_needs_init) {
          _this->_impl_.ip_.v6_.InitDefault();
        }
        _this->_impl_.ip_.v6_.Set(from._internal_v6(), arena);
        break;
      }
      case IP_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgIPAddress::CopyFrom(const CMsgIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgIPAddress::InternalSwap(CMsgIPAddress* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ip_, other->_impl_.ip_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CMsgIPAddress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgIPAddressBucket::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgIPAddressBucket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_._has_bits_);
};

CMsgIPAddressBucket::CMsgIPAddressBucket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgIPAddressBucket)
}
inline PROTOBUF_NDEBUG_INLINE CMsgIPAddressBucket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgIPAddressBucket& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgIPAddressBucket::CMsgIPAddressBucket(
    ::google::protobuf::Arena* arena,
    const CMsgIPAddressBucket& from)
    : ::google::protobuf::Message(arena) {
  CMsgIPAddressBucket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.original_ip_address_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::CMsgIPAddress>(
                              arena, *from._impl_.original_ip_address_)
                        : nullptr;
  _impl_.bucket_ = from._impl_.bucket_;

  // @@protoc_insertion_point(copy_constructor:CMsgIPAddressBucket)
}
inline PROTOBUF_NDEBUG_INLINE CMsgIPAddressBucket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CMsgIPAddressBucket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, original_ip_address_),
           0,
           offsetof(Impl_, bucket_) -
               offsetof(Impl_, original_ip_address_) +
               sizeof(Impl_::bucket_));
}
CMsgIPAddressBucket::~CMsgIPAddressBucket() {
  // @@protoc_insertion_point(destructor:CMsgIPAddressBucket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgIPAddressBucket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.original_ip_address_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgIPAddressBucket::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_._cached_size_),
              false,
          },
          &CMsgIPAddressBucket::MergeImpl,
          &CMsgIPAddressBucket::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CMsgIPAddressBucket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgIPAddressBucket_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgIPAddressBucket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed64 bucket = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.bucket_)}},
    // optional .CMsgIPAddress original_ip_address = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.original_ip_address_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgIPAddress original_ip_address = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.original_ip_address_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed64 bucket = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.bucket_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgIPAddress>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CMsgIPAddressBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgIPAddressBucket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.original_ip_address_ != nullptr);
    _impl_.original_ip_address_->Clear();
  }
  _impl_.bucket_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgIPAddressBucket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgIPAddressBucket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgIPAddress original_ip_address = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.original_ip_address_, _impl_.original_ip_address_->GetCachedSize(), target, stream);
  }

  // optional fixed64 bucket = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgIPAddressBucket)
  return target;
}

::size_t CMsgIPAddressBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgIPAddressBucket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgIPAddress original_ip_address = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.original_ip_address_);
    }

    // optional fixed64 bucket = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgIPAddressBucket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgIPAddressBucket*>(&to_msg);
  auto& from = static_cast<const CMsgIPAddressBucket&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgIPAddressBucket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.original_ip_address_ != nullptr);
      if (_this->_impl_.original_ip_address_ == nullptr) {
        _this->_impl_.original_ip_address_ =
            ::google::protobuf::Message::CopyConstruct<::CMsgIPAddress>(arena, *from._impl_.original_ip_address_);
      } else {
        _this->_impl_.original_ip_address_->MergeFrom(*from._impl_.original_ip_address_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bucket_ = from._impl_.bucket_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgIPAddressBucket::CopyFrom(const CMsgIPAddressBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgIPAddressBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgIPAddressBucket::InternalSwap(CMsgIPAddressBucket* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.bucket_)
      + sizeof(CMsgIPAddressBucket::_impl_.bucket_)
      - PROTOBUF_FIELD_OFFSET(CMsgIPAddressBucket, _impl_.original_ip_address_)>(
          reinterpret_cast<char*>(&_impl_.original_ip_address_),
          reinterpret_cast<char*>(&other->_impl_.original_ip_address_));
}

::google::protobuf::Metadata CMsgIPAddressBucket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgProtoBufHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgProtoBufHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _impl_._oneof_case_);
};

CMsgProtoBufHeader::CMsgProtoBufHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtoBufHeader)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtoBufHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgProtoBufHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        forward_to_sysid_{visibility, arena, from.forward_to_sysid_},
        target_job_name_(arena, from.target_job_name_),
        error_message_(arena, from.error_message_),
        debug_source_(arena, from.debug_source_),
        ip_addr_{},
        _oneof_case_{from._oneof_case_[0]} {}

CMsgProtoBufHeader::CMsgProtoBufHeader(
    ::google::protobuf::Arena* arena,
    const CMsgProtoBufHeader& from)
    : ::google::protobuf::Message(arena) {
  CMsgProtoBufHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, steamid_),
           offsetof(Impl_, messageid_) -
               offsetof(Impl_, steamid_) +
               sizeof(Impl_::messageid_));
  switch (ip_addr_case()) {
    case IP_ADDR_NOT_SET:
      break;
      case kIp:
        _impl_.ip_addr_.ip_ = from._impl_.ip_addr_.ip_;
        break;
      case kIpV6:
        new (&_impl_.ip_addr_.ip_v6_) decltype(_impl_.ip_addr_.ip_v6_){arena, from._impl_.ip_addr_.ip_v6_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtoBufHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        forward_to_sysid_{visibility, arena},
        target_job_name_(arena),
        error_message_(arena),
        debug_source_(arena),
        timeout_ms_{-1},
        jobid_source_{::uint64_t{18446744073709551615u}},
        jobid_target_{::uint64_t{18446744073709551615u}},
        eresult_{2},
        transport_error_{1},
        messageid_{::uint64_t{18446744073709551615u}},
        ip_addr_{},
        _oneof_case_{} {}

inline void CMsgProtoBufHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_),
           0,
           offsetof(Impl_, realm_) -
               offsetof(Impl_, steamid_) +
               sizeof(Impl_::realm_));
}
CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgProtoBufHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.target_job_name_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.debug_source_.Destroy();
  if (has_ip_addr()) {
    clear_ip_addr();
  }
  _impl_.~Impl_();
}

void CMsgProtoBufHeader::clear_ip_addr() {
// @@protoc_insertion_point(one_of_clear_start:CMsgProtoBufHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (ip_addr_case()) {
    case kIp: {
      // No need to clear
      break;
    }
    case kIpV6: {
      _impl_.ip_addr_.ip_v6_.Destroy();
      break;
    }
    case IP_ADDR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IP_ADDR_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
CMsgProtoBufHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._cached_size_),
              false,
          },
          &CMsgProtoBufHeader::MergeImpl,
          &CMsgProtoBufHeader::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 27, 0, 91, 7> CMsgProtoBufHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_._has_bits_),
    0, // no _extensions_
    34, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    536871416,  // skipmap
    offsetof(decltype(_table_), field_entries),
    27,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgProtoBufHeader_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgProtoBufHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 steamid = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.steamid_)}},
    // optional int32 client_sessionid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.client_sessionid_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_sessionid_)}},
    // optional uint32 routing_appid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.routing_appid_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.routing_appid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    {::_pbi::TcParser::FastF64S1,
     {81, 19, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.jobid_source_)}},
    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    {::_pbi::TcParser::FastF64S1,
     {89, 20, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.jobid_target_)}},
    // optional string target_job_name = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.target_job_name_)}},
    // optional int32 eresult = 13 [default = 2];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgProtoBufHeader, _impl_.eresult_), 21>(),
     {104, 21, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.eresult_)}},
    // optional string error_message = 14;
    {::_pbi::TcParser::FastSS1,
     {114, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.error_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 auth_account_flags = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.auth_account_flags_)}},
    // optional int32 transport_error = 17 [default = 1];
    {::_pbi::TcParser::FastV32S2,
     {392, 22, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.transport_error_)}},
    // optional uint64 messageid = 18 [default = 18446744073709551615];
    {::_pbi::TcParser::FastV64S2,
     {400, 23, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.messageid_)}},
    // optional uint32 publisher_group_id = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.publisher_group_id_)}},
    // optional uint32 sysid = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.sysid_)}},
    // optional uint64 trace_tag = 21;
    {::_pbi::TcParser::FastV64S2,
     {424, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.trace_tag_)}},
    // optional uint32 token_source = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.token_source_)}},
    // optional bool admin_spoofing_user = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.admin_spoofing_user_)}},
    // optional int32 seq_num = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.seq_num_)}},
    // optional uint32 webapi_key_id = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.webapi_key_id_)}},
    // optional bool is_from_external_source = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.is_from_external_source_)}},
    // repeated uint32 forward_to_sysid = 27;
    {::_pbi::TcParser::FastV32R2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.forward_to_sysid_)}},
    // optional uint32 cm_sysid = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.cm_sysid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 launcher_type = 31 [default = 0];
    {::_pbi::TcParser::FastV32S2,
     {504, 16, 0, PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.launcher_type_)}},
  }}, {{
    33, 0, 1,
    65532, 25,
    65535, 65535
  }}, {{
    // optional fixed64 steamid = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.steamid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional int32 client_sessionid = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.client_sessionid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 routing_appid = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.routing_appid_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.jobid_source_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.jobid_target_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string target_job_name = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.target_job_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 eresult = 13 [default = 2];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.eresult_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string error_message = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.error_message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // uint32 ip = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.ip_addr_.ip_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
    // optional uint32 auth_account_flags = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.auth_account_flags_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 transport_error = 17 [default = 1];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.transport_error_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint64 messageid = 18 [default = 18446744073709551615];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.messageid_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 publisher_group_id = 19;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.publisher_group_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 sysid = 20;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.sysid_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 trace_tag = 21;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.trace_tag_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 token_source = 22;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.token_source_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool admin_spoofing_user = 23;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.admin_spoofing_user_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional int32 seq_num = 24;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.seq_num_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 webapi_key_id = 25;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.webapi_key_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool is_from_external_source = 26;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.is_from_external_source_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated uint32 forward_to_sysid = 27;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.forward_to_sysid_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional uint32 cm_sysid = 28;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.cm_sysid_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bytes ip_v6 = 29;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.ip_addr_.ip_v6_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 launcher_type = 31 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.launcher_type_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 realm = 32 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.realm_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 timeout_ms = 33 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.timeout_ms_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string debug_source = 34;
    {PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.debug_source_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\0\0\0\0\17\0\15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\14\0\0\0\0"
    "CMsgProtoBufHeader"
    "target_job_name"
    "error_message"
    "debug_source"
  }},
};

PROTOBUF_NOINLINE void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.forward_to_sysid_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.target_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.debug_source_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.steamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.publisher_group_id_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.publisher_group_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.trace_tag_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cm_sysid_) -
        reinterpret_cast<char*>(&_impl_.trace_tag_)) + sizeof(_impl_.cm_sysid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.launcher_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.realm_) -
        reinterpret_cast<char*>(&_impl_.launcher_type_)) + sizeof(_impl_.realm_));
    _impl_.timeout_ms_ = -1;
    _impl_.jobid_source_ = ::uint64_t{18446744073709551615u};
    _impl_.jobid_target_ = ::uint64_t{18446744073709551615u};
    _impl_.eresult_ = 2;
    _impl_.transport_error_ = 1;
    _impl_.messageid_ = ::uint64_t{18446744073709551615u};
  }
  clear_ip_addr();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgProtoBufHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        10, this->_internal_jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        11, this->_internal_jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_target_job_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgProtoBufHeader.target_job_name");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<13>(
            stream, this->_internal_eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgProtoBufHeader.error_message");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // uint32 ip = 15;
  if (ip_addr_case() == kIp) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this->_internal_ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        21, this->_internal_trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        22, this->_internal_token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        24, this->_internal_seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        25, this->_internal_webapi_key_id(), target);
  }

  // optional bool is_from_external_source = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        26, this->_internal_is_from_external_source(), target);
  }

  // repeated uint32 forward_to_sysid = 27;
  for (int i = 0, n = this->_internal_forward_to_sysid_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        27, this->_internal_forward_to_sysid().Get(i), target);
  }

  // optional uint32 cm_sysid = 28;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        28, this->_internal_cm_sysid(), target);
  }

  // bytes ip_v6 = 29;
  if (ip_addr_case() == kIpV6) {
    const std::string& _s = this->_internal_ip_v6();
    target = stream->WriteBytesMaybeAliased(29, _s, target);
  }

  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        31, this->_internal_launcher_type(), target);
  }

  // optional uint32 realm = 32 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        32, this->_internal_realm(), target);
  }

  // optional int32 timeout_ms = 33 [default = -1];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        33, this->_internal_timeout_ms(), target);
  }

  // optional string debug_source = 34;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_debug_source();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgProtoBufHeader.debug_source");
    target = stream->WriteStringMaybeAliased(34, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

::size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated uint32 forward_to_sysid = 27;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_forward_to_sysid())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_forward_to_sysid_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_message());
    }

    // optional string debug_source = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_debug_source());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional int32 client_sessionid = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_routing_appid());
    }

    // optional uint32 auth_account_flags = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_auth_account_flags());
    }

    // optional uint32 publisher_group_id = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_publisher_group_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 trace_tag = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_trace_tag());
    }

    // optional uint32 sysid = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_sysid());
    }

    // optional uint32 token_source = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_token_source());
    }

    // optional int32 seq_num = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_seq_num());
    }

    // optional bool admin_spoofing_user = 23;
    if (cached_has_bits & 0x00001000u) {
      total_size += 3;
    }

    // optional bool is_from_external_source = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 3;
    }

    // optional uint32 webapi_key_id = 25;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_webapi_key_id());
    }

    // optional uint32 cm_sysid = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_cm_sysid());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 launcher_type = 31 [default = 0];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_launcher_type());
    }

    // optional uint32 realm = 32 [default = 0];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_realm());
    }

    // optional int32 timeout_ms = 33 [default = -1];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_timeout_ms());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00080000u) {
      total_size += 9;
    }

    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00100000u) {
      total_size += 9;
    }

    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_eresult());
    }

    // optional int32 transport_error = 17 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this->_internal_messageid());
    }

  }
  switch (ip_addr_case()) {
    // uint32 ip = 15;
    case kIp: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ip());
      break;
    }
    // bytes ip_v6 = 29;
    case kIpV6: {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ip_v6());
      break;
    }
    case IP_ADDR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgProtoBufHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgProtoBufHeader*>(&to_msg);
  auto& from = static_cast<const CMsgProtoBufHeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_forward_to_sysid()->MergeFrom(from._internal_forward_to_sysid());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_target_job_name(from._internal_target_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_debug_source(from._internal_debug_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_sessionid_ = from._impl_.client_sessionid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.routing_appid_ = from._impl_.routing_appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.auth_account_flags_ = from._impl_.auth_account_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.publisher_group_id_ = from._impl_.publisher_group_id_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.trace_tag_ = from._impl_.trace_tag_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sysid_ = from._impl_.sysid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.token_source_ = from._impl_.token_source_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.seq_num_ = from._impl_.seq_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.admin_spoofing_user_ = from._impl_.admin_spoofing_user_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.is_from_external_source_ = from._impl_.is_from_external_source_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.webapi_key_id_ = from._impl_.webapi_key_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cm_sysid_ = from._impl_.cm_sysid_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.launcher_type_ = from._impl_.launcher_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.realm_ = from._impl_.realm_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.timeout_ms_ = from._impl_.timeout_ms_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.jobid_source_ = from._impl_.jobid_source_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.jobid_target_ = from._impl_.jobid_target_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.transport_error_ = from._impl_.transport_error_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.messageid_ = from._impl_.messageid_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_ip_addr();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kIp: {
        _this->_impl_.ip_addr_.ip_ = from._impl_.ip_addr_.ip_;
        break;
      }
      case kIpV6: {
        if (oneof_needs_init) {
          _this->_impl_.ip_addr_.ip_v6_.InitDefault();
        }
        _this->_impl_.ip_addr_.ip_v6_.Set(from._internal_ip_v6(), arena);
        break;
      }
      case IP_ADDR_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.forward_to_sysid_.InternalSwap(&other->_impl_.forward_to_sysid_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_job_name_, &other->_impl_.target_job_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.debug_source_, &other->_impl_.debug_source_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.messageid_)
      + sizeof(CMsgProtoBufHeader::_impl_.messageid_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
  swap(_impl_.ip_addr_, other->_impl_.ip_addr_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgMulti::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgMulti>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_._has_bits_);
};

CMsgMulti::CMsgMulti(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMulti)
}
inline PROTOBUF_NDEBUG_INLINE CMsgMulti::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgMulti& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_body_(arena, from.message_body_) {}

CMsgMulti::CMsgMulti(
    ::google::protobuf::Arena* arena,
    const CMsgMulti& from)
    : ::google::protobuf::Message(arena) {
  CMsgMulti* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.size_unzipped_ = from._impl_.size_unzipped_;

  // @@protoc_insertion_point(copy_constructor:CMsgMulti)
}
inline PROTOBUF_NDEBUG_INLINE CMsgMulti::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_body_(arena) {}

inline void CMsgMulti::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.size_unzipped_ = {};
}
CMsgMulti::~CMsgMulti() {
  // @@protoc_insertion_point(destructor:CMsgMulti)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgMulti::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_body_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgMulti::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_._cached_size_),
              false,
          },
          &CMsgMulti::MergeImpl,
          &CMsgMulti::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CMsgMulti::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgMulti_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgMulti>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes message_body = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_.message_body_)}},
    // optional uint32 size_unzipped = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgMulti, _impl_.size_unzipped_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_.size_unzipped_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 size_unzipped = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_.size_unzipped_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes message_body = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgMulti, _impl_.message_body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CMsgMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMulti)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_body_.ClearNonDefaultToEmpty();
  }
  _impl_.size_unzipped_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgMulti::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMulti)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMulti)
  return target;
}

::size_t CMsgMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMulti)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes message_body = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_message_body());
    }

    // optional uint32 size_unzipped = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_size_unzipped());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgMulti::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgMulti*>(&to_msg);
  auto& from = static_cast<const CMsgMulti&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMulti)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message_body(from._internal_message_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_unzipped_ = from._impl_.size_unzipped_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgMulti::InternalSwap(CMsgMulti* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_body_, &other->_impl_.message_body_, arena);
        swap(_impl_.size_unzipped_, other->_impl_.size_unzipped_);
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgProtobufWrapped::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgProtobufWrapped>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgProtobufWrapped, _impl_._has_bits_);
};

CMsgProtobufWrapped::CMsgProtobufWrapped(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProtobufWrapped)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtobufWrapped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgProtobufWrapped& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_body_(arena, from.message_body_) {}

CMsgProtobufWrapped::CMsgProtobufWrapped(
    ::google::protobuf::Arena* arena,
    const CMsgProtobufWrapped& from)
    : ::google::protobuf::Message(arena) {
  CMsgProtobufWrapped* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CMsgProtobufWrapped)
}
inline PROTOBUF_NDEBUG_INLINE CMsgProtobufWrapped::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        message_body_(arena) {}

inline void CMsgProtobufWrapped::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  // @@protoc_insertion_point(destructor:CMsgProtobufWrapped)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgProtobufWrapped::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_body_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgProtobufWrapped::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgProtobufWrapped, _impl_._cached_size_),
              false,
          },
          &CMsgProtobufWrapped::MergeImpl,
          &CMsgProtobufWrapped::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CMsgProtobufWrapped::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgProtobufWrapped, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgProtobufWrapped_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgProtobufWrapped>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes message_body = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgProtobufWrapped, _impl_.message_body_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes message_body = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgProtobufWrapped, _impl_.message_body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CMsgProtobufWrapped::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtobufWrapped)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_body_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgProtobufWrapped::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtobufWrapped)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message_body();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtobufWrapped)
  return target;
}

::size_t CMsgProtobufWrapped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtobufWrapped)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes message_body = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_message_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgProtobufWrapped::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgProtobufWrapped*>(&to_msg);
  auto& from = static_cast<const CMsgProtobufWrapped&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtobufWrapped)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_message_body(from._internal_message_body());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgProtobufWrapped::InternalSwap(CMsgProtobufWrapped* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_body_, &other->_impl_.message_body_, arena);
}

::google::protobuf::Metadata CMsgProtobufWrapped::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgAuthTicket::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgAuthTicket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_._has_bits_);
};

CMsgAuthTicket::CMsgAuthTicket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAuthTicket)
}
inline PROTOBUF_NDEBUG_INLINE CMsgAuthTicket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgAuthTicket& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ticket_(arena, from.ticket_) {}

CMsgAuthTicket::CMsgAuthTicket(
    ::google::protobuf::Arena* arena,
    const CMsgAuthTicket& from)
    : ::google::protobuf::Message(arena) {
  CMsgAuthTicket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, steamid_),
           offsetof(Impl_, eresult_) -
               offsetof(Impl_, steamid_) +
               sizeof(Impl_::eresult_));

  // @@protoc_insertion_point(copy_constructor:CMsgAuthTicket)
}
inline PROTOBUF_NDEBUG_INLINE CMsgAuthTicket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ticket_(arena),
        eresult_{2u} {}

inline void CMsgAuthTicket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_),
           0,
           offsetof(Impl_, ticket_crc_) -
               offsetof(Impl_, steamid_) +
               sizeof(Impl_::ticket_crc_));
}
CMsgAuthTicket::~CMsgAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgAuthTicket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgAuthTicket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ticket_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgAuthTicket::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_._cached_size_),
              false,
          },
          &CMsgAuthTicket::MergeImpl,
          &CMsgAuthTicket::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> CMsgAuthTicket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgAuthTicket_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgAuthTicket>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 estate = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgAuthTicket, _impl_.estate_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.estate_)}},
    // optional uint32 eresult = 2 [default = 2];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgAuthTicket, _impl_.eresult_), 6>(),
     {16, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.eresult_)}},
    // optional fixed64 steamid = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.steamid_)}},
    // optional fixed64 gameid = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.gameid_)}},
    // optional uint32 h_steam_pipe = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgAuthTicket, _impl_.h_steam_pipe_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.h_steam_pipe_)}},
    // optional uint32 ticket_crc = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgAuthTicket, _impl_.ticket_crc_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.ticket_crc_)}},
    // optional bytes ticket = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.ticket_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 estate = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.estate_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 eresult = 2 [default = 2];
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.eresult_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 steamid = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.steamid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 gameid = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.gameid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 h_steam_pipe = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.h_steam_pipe_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ticket_crc = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.ticket_crc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes ticket = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.ticket_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CMsgAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAuthTicket)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ticket_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.steamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ticket_crc_) -
        reinterpret_cast<char*>(&_impl_.steamid_)) + sizeof(_impl_.ticket_crc_));
    _impl_.eresult_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgAuthTicket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAuthTicket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this->_internal_gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_ticket();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAuthTicket)
  return target;
}

::size_t CMsgAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAuthTicket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes ticket = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_ticket());
    }

    // optional fixed64 steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 9;
    }

    // optional uint32 estate = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_estate());
    }

    // optional uint32 h_steam_pipe = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_h_steam_pipe());
    }

    // optional fixed64 gameid = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 9;
    }

    // optional uint32 ticket_crc = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ticket_crc());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgAuthTicket::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgAuthTicket*>(&to_msg);
  auto& from = static_cast<const CMsgAuthTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAuthTicket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ticket(from._internal_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steamid_ = from._impl_.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.estate_ = from._impl_.estate_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.h_steam_pipe_ = from._impl_.h_steam_pipe_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gameid_ = from._impl_.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ticket_crc_ = from._impl_.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgAuthTicket::InternalSwap(CMsgAuthTicket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticket_, &other->_impl_.ticket_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.eresult_)
      + sizeof(CMsgAuthTicket::_impl_.eresult_)
      - PROTOBUF_FIELD_OFFSET(CMsgAuthTicket, _impl_.steamid_)>(
          reinterpret_cast<char*>(&_impl_.steamid_),
          reinterpret_cast<char*>(&other->_impl_.steamid_));
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CCDDBAppDetailCommon::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CCDDBAppDetailCommon>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_._has_bits_);
};

CCDDBAppDetailCommon::CCDDBAppDetailCommon(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCDDBAppDetailCommon)
}
inline PROTOBUF_NDEBUG_INLINE CCDDBAppDetailCommon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CCDDBAppDetailCommon& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        icon_(arena, from.icon_),
        friendly_name_(arena, from.friendly_name_),
        propagation_(arena, from.propagation_) {}

CCDDBAppDetailCommon::CCDDBAppDetailCommon(
    ::google::protobuf::Arena* arena,
    const CCDDBAppDetailCommon& from)
    : ::google::protobuf::Message(arena) {
  CCDDBAppDetailCommon* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, appid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, appid_),
           offsetof(Impl_, app_type_) -
               offsetof(Impl_, appid_) +
               sizeof(Impl_::app_type_));

  // @@protoc_insertion_point(copy_constructor:CCDDBAppDetailCommon)
}
inline PROTOBUF_NDEBUG_INLINE CCDDBAppDetailCommon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        icon_(arena),
        friendly_name_(arena),
        propagation_(arena) {}

inline void CCDDBAppDetailCommon::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, appid_),
           0,
           offsetof(Impl_, app_type_) -
               offsetof(Impl_, appid_) +
               sizeof(Impl_::app_type_));
}
CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  // @@protoc_insertion_point(destructor:CCDDBAppDetailCommon)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCDDBAppDetailCommon::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.icon_.Destroy();
  _impl_.friendly_name_.Destroy();
  _impl_.propagation_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CCDDBAppDetailCommon::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_._cached_size_),
              false,
          },
          &CCDDBAppDetailCommon::MergeImpl,
          &CCDDBAppDetailCommon::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 69, 2> CCDDBAppDetailCommon::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950936,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCDDBAppDetailCommon_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CCDDBAppDetailCommon>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 appid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCDDBAppDetailCommon, _impl_.appid_), 4>(),
     {8, 4, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.appid_)}},
    // optional string name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.name_)}},
    // optional string icon = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.icon_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool tool = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.tool_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.tool_)}},
    // optional bool demo = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.demo_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.demo_)}},
    // optional bool media = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.media_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.media_)}},
    // optional bool community_visible_stats = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.community_visible_stats_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.community_visible_stats_)}},
    // optional string friendly_name = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.friendly_name_)}},
    // optional string propagation = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 3, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.propagation_)}},
    // optional bool has_adult_content = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.has_adult_content_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.has_adult_content_)}},
    // optional bool is_visible_in_steam_china = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCDDBAppDetailCommon, _impl_.is_visible_in_steam_china_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.is_visible_in_steam_china_)}},
    // optional uint32 app_type = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCDDBAppDetailCommon, _impl_.app_type_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.app_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 appid = 1;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.appid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string name = 2;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string icon = 3;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.icon_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool tool = 6;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.tool_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool demo = 7;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.demo_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool media = 8;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.media_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool community_visible_stats = 9;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.community_visible_stats_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string friendly_name = 10;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.friendly_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string propagation = 11;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.propagation_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool has_adult_content = 12;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.has_adult_content_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_visible_in_steam_china = 13;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.is_visible_in_steam_china_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 app_type = 14;
    {PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.app_type_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\24\0\4\4\0\0\0\0\15\13\0\0\0\0\0\0"
    "CCDDBAppDetailCommon"
    "name"
    "icon"
    "friendly_name"
    "propagation"
  }},
};

PROTOBUF_NOINLINE void CCDDBAppDetailCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:CCDDBAppDetailCommon)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.friendly_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.propagation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.media_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.media_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.community_visible_stats_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.app_type_) -
        reinterpret_cast<char*>(&_impl_.community_visible_stats_)) + sizeof(_impl_.app_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CCDDBAppDetailCommon::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCDDBAppDetailCommon)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCDDBAppDetailCommon.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_icon();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCDDBAppDetailCommon.icon");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_tool(), target);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_demo(), target);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_friendly_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCDDBAppDetailCommon.friendly_name");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_propagation();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCDDBAppDetailCommon.propagation");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_has_adult_content(), target);
  }

  // optional bool is_visible_in_steam_china = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_is_visible_in_steam_china(), target);
  }

  // optional uint32 app_type = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this->_internal_app_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCDDBAppDetailCommon)
  return target;
}

::size_t CCDDBAppDetailCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCDDBAppDetailCommon)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_icon());
    }

    // optional string friendly_name = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_friendly_name());
    }

    // optional string propagation = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_propagation());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional bool tool = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool demo = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool media = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool community_visible_stats = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool has_adult_content = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool is_visible_in_steam_china = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional uint32 app_type = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_app_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CCDDBAppDetailCommon::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CCDDBAppDetailCommon*>(&to_msg);
  auto& from = static_cast<const CCDDBAppDetailCommon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCDDBAppDetailCommon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_friendly_name(from._internal_friendly_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_propagation(from._internal_propagation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tool_ = from._impl_.tool_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.demo_ = from._impl_.demo_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.media_ = from._impl_.media_;
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.community_visible_stats_ = from._impl_.community_visible_stats_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.has_adult_content_ = from._impl_.has_adult_content_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_visible_in_steam_china_ = from._impl_.is_visible_in_steam_china_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.app_type_ = from._impl_.app_type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CCDDBAppDetailCommon::InternalSwap(CCDDBAppDetailCommon* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_, &other->_impl_.icon_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.friendly_name_, &other->_impl_.friendly_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.propagation_, &other->_impl_.propagation_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.app_type_)
      + sizeof(CCDDBAppDetailCommon::_impl_.app_type_)
      - PROTOBUF_FIELD_OFFSET(CCDDBAppDetailCommon, _impl_.appid_)>(
          reinterpret_cast<char*>(&_impl_.appid_),
          reinterpret_cast<char*>(&other->_impl_.appid_));
}

::google::protobuf::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgAppRights::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgAppRights>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_._has_bits_);
};

CMsgAppRights::CMsgAppRights(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAppRights)
}
CMsgAppRights::CMsgAppRights(
    ::google::protobuf::Arena* arena, const CMsgAppRights& from)
    : CMsgAppRights(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CMsgAppRights::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CMsgAppRights::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, edit_info_),
           0,
           offsetof(Impl_, edit_store_display_content_) -
               offsetof(Impl_, edit_info_) +
               sizeof(Impl_::edit_store_display_content_));
}
CMsgAppRights::~CMsgAppRights() {
  // @@protoc_insertion_point(destructor:CMsgAppRights)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgAppRights::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgAppRights::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_._cached_size_),
              false,
          },
          &CMsgAppRights::MergeImpl,
          &CMsgAppRights::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 0, 0, 2> CMsgAppRights::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgAppRights_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgAppRights>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool edit_info = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.edit_info_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_info_)}},
    // optional bool publish = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.publish_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.publish_)}},
    // optional bool view_error_data = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.view_error_data_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_error_data_)}},
    // optional bool download = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.download_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.download_)}},
    // optional bool upload_cdkeys = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.upload_cdkeys_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.upload_cdkeys_)}},
    // optional bool generate_cdkeys = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.generate_cdkeys_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.generate_cdkeys_)}},
    // optional bool view_financials = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.view_financials_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_financials_)}},
    // optional bool manage_ceg = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.manage_ceg_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_ceg_)}},
    // optional bool manage_signing = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.manage_signing_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_signing_)}},
    // optional bool manage_cdkeys = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.manage_cdkeys_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_cdkeys_)}},
    // optional bool edit_marketing = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.edit_marketing_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_marketing_)}},
    // optional bool economy_support = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.economy_support_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.economy_support_)}},
    // optional bool economy_support_supervisor = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.economy_support_supervisor_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.economy_support_supervisor_)}},
    // optional bool manage_pricing = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.manage_pricing_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_pricing_)}},
    // optional bool broadcast_live = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgAppRights, _impl_.broadcast_live_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.broadcast_live_)}},
    // optional bool view_marketing_traffic = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_marketing_traffic_)}},
    // optional bool edit_store_display_content = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_store_display_content_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool edit_info = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool publish = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.publish_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool view_error_data = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_error_data_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool download = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.download_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool upload_cdkeys = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.upload_cdkeys_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool generate_cdkeys = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.generate_cdkeys_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool view_financials = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_financials_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool manage_ceg = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_ceg_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool manage_signing = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_signing_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool manage_cdkeys = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_cdkeys_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool edit_marketing = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_marketing_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool economy_support = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.economy_support_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool economy_support_supervisor = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.economy_support_supervisor_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool manage_pricing = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.manage_pricing_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool broadcast_live = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.broadcast_live_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool view_marketing_traffic = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.view_marketing_traffic_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool edit_store_display_content = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_store_display_content_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CMsgAppRights::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAppRights)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.edit_info_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.manage_ceg_) -
        reinterpret_cast<char*>(&_impl_.edit_info_)) + sizeof(_impl_.manage_ceg_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.manage_signing_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.view_marketing_traffic_) -
        reinterpret_cast<char*>(&_impl_.manage_signing_)) + sizeof(_impl_.view_marketing_traffic_));
  }
  _impl_.edit_store_display_content_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgAppRights::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAppRights)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_edit_info(), target);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_publish(), target);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_view_error_data(), target);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_broadcast_live(), target);
  }

  // optional bool view_marketing_traffic = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_view_marketing_traffic(), target);
  }

  // optional bool edit_store_display_content = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_edit_store_display_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAppRights)
  return target;
}

::size_t CMsgAppRights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAppRights)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool edit_info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional bool publish = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool view_error_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool download = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool upload_cdkeys = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool generate_cdkeys = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool view_financials = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool manage_ceg = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool manage_signing = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool manage_cdkeys = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool edit_marketing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool economy_support = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

    // optional bool economy_support_supervisor = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2;
    }

    // optional bool manage_pricing = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2;
    }

    // optional bool broadcast_live = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2;
    }

    // optional bool view_marketing_traffic = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  // optional bool edit_store_display_content = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgAppRights::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgAppRights*>(&to_msg);
  auto& from = static_cast<const CMsgAppRights&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAppRights)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.edit_info_ = from._impl_.edit_info_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.publish_ = from._impl_.publish_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.view_error_data_ = from._impl_.view_error_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.download_ = from._impl_.download_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.upload_cdkeys_ = from._impl_.upload_cdkeys_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.generate_cdkeys_ = from._impl_.generate_cdkeys_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.view_financials_ = from._impl_.view_financials_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.manage_ceg_ = from._impl_.manage_ceg_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.manage_signing_ = from._impl_.manage_signing_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.manage_cdkeys_ = from._impl_.manage_cdkeys_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.edit_marketing_ = from._impl_.edit_marketing_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.economy_support_ = from._impl_.economy_support_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.economy_support_supervisor_ = from._impl_.economy_support_supervisor_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.manage_pricing_ = from._impl_.manage_pricing_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.broadcast_live_ = from._impl_.broadcast_live_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.view_marketing_traffic_ = from._impl_.view_marketing_traffic_;
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_impl_.edit_store_display_content_ = from._impl_.edit_store_display_content_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgAppRights::InternalSwap(CMsgAppRights* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_store_display_content_)
      + sizeof(CMsgAppRights::_impl_.edit_store_display_content_)
      - PROTOBUF_FIELD_OFFSET(CMsgAppRights, _impl_.edit_info_)>(
          reinterpret_cast<char*>(&_impl_.edit_info_),
          reinterpret_cast<char*>(&other->_impl_.edit_info_));
}

::google::protobuf::Metadata CMsgAppRights::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CCuratorPreferences::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CCuratorPreferences>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_._has_bits_);
};

CCuratorPreferences::CCuratorPreferences(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCuratorPreferences)
}
inline PROTOBUF_NDEBUG_INLINE CCuratorPreferences::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CCuratorPreferences& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tagids_curated_{visibility, arena, from.tagids_curated_},
        tagids_filtered_{visibility, arena, from.tagids_filtered_},
        website_title_(arena, from.website_title_),
        website_url_(arena, from.website_url_),
        discussion_url_(arena, from.discussion_url_) {}

CCuratorPreferences::CCuratorPreferences(
    ::google::protobuf::Arena* arena,
    const CCuratorPreferences& from)
    : ::google::protobuf::Message(arena) {
  CCuratorPreferences* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, supported_languages_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, supported_languages_),
           offsetof(Impl_, show_broadcast_) -
               offsetof(Impl_, supported_languages_) +
               sizeof(Impl_::show_broadcast_));

  // @@protoc_insertion_point(copy_constructor:CCuratorPreferences)
}
inline PROTOBUF_NDEBUG_INLINE CCuratorPreferences::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tagids_curated_{visibility, arena},
        tagids_filtered_{visibility, arena},
        website_title_(arena),
        website_url_(arena),
        discussion_url_(arena) {}

inline void CCuratorPreferences::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, supported_languages_),
           0,
           offsetof(Impl_, show_broadcast_) -
               offsetof(Impl_, supported_languages_) +
               sizeof(Impl_::show_broadcast_));
}
CCuratorPreferences::~CCuratorPreferences() {
  // @@protoc_insertion_point(destructor:CCuratorPreferences)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCuratorPreferences::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.website_title_.Destroy();
  _impl_.website_url_.Destroy();
  _impl_.discussion_url_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CCuratorPreferences::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_._cached_size_),
              false,
          },
          &CCuratorPreferences::MergeImpl,
          &CCuratorPreferences::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 74, 2> CCuratorPreferences::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCuratorPreferences_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CCuratorPreferences>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 supported_languages = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCuratorPreferences, _impl_.supported_languages_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.supported_languages_)}},
    // optional bool platform_windows = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.platform_windows_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_windows_)}},
    // optional bool platform_mac = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.platform_mac_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_mac_)}},
    // optional bool platform_linux = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.platform_linux_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_linux_)}},
    // optional bool vr_content = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.vr_content_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.vr_content_)}},
    // optional bool adult_content_violence = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.adult_content_violence_), 9>(),
     {48, 9, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.adult_content_violence_)}},
    // optional bool adult_content_sex = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.adult_content_sex_), 10>(),
     {56, 10, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.adult_content_sex_)}},
    // optional uint32 timestamp_updated = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCuratorPreferences, _impl_.timestamp_updated_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.timestamp_updated_)}},
    // repeated uint32 tagids_curated = 9;
    {::_pbi::TcParser::FastV32R1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.tagids_curated_)}},
    // repeated uint32 tagids_filtered = 10;
    {::_pbi::TcParser::FastV32R1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.tagids_filtered_)}},
    // optional string website_title = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.website_title_)}},
    // optional string website_url = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.website_url_)}},
    // optional string discussion_url = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 2, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.discussion_url_)}},
    // optional bool show_broadcast = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCuratorPreferences, _impl_.show_broadcast_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.show_broadcast_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 supported_languages = 1;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.supported_languages_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool platform_windows = 2;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_windows_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool platform_mac = 3;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_mac_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool platform_linux = 4;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.platform_linux_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool vr_content = 5;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.vr_content_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool adult_content_violence = 6;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.adult_content_violence_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool adult_content_sex = 7;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.adult_content_sex_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 timestamp_updated = 8;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.timestamp_updated_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 tagids_curated = 9;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.tagids_curated_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated uint32 tagids_filtered = 10;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.tagids_filtered_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional string website_title = 11;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.website_title_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string website_url = 12;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.website_url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string discussion_url = 13;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.discussion_url_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool show_broadcast = 14;
    {PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.show_broadcast_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\23\0\0\0\0\0\0\0\0\0\0\15\13\16\0\0"
    "CCuratorPreferences"
    "website_title"
    "website_url"
    "discussion_url"
  }},
};

PROTOBUF_NOINLINE void CCuratorPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CCuratorPreferences)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tagids_curated_.Clear();
  _impl_.tagids_filtered_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.website_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.website_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.discussion_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.supported_languages_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vr_content_) -
        reinterpret_cast<char*>(&_impl_.supported_languages_)) + sizeof(_impl_.vr_content_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.timestamp_updated_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.show_broadcast_) -
        reinterpret_cast<char*>(&_impl_.timestamp_updated_)) + sizeof(_impl_.show_broadcast_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CCuratorPreferences::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCuratorPreferences)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 supported_languages = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_supported_languages(), target);
  }

  // optional bool platform_windows = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_platform_windows(), target);
  }

  // optional bool platform_mac = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_platform_mac(), target);
  }

  // optional bool platform_linux = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_platform_linux(), target);
  }

  // optional bool vr_content = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_vr_content(), target);
  }

  // optional bool adult_content_violence = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_adult_content_violence(), target);
  }

  // optional bool adult_content_sex = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_timestamp_updated(), target);
  }

  // repeated uint32 tagids_curated = 9;
  for (int i = 0, n = this->_internal_tagids_curated_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_tagids_curated().Get(i), target);
  }

  // repeated uint32 tagids_filtered = 10;
  for (int i = 0, n = this->_internal_tagids_filtered_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_tagids_filtered().Get(i), target);
  }

  // optional string website_title = 11;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_website_title();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCuratorPreferences.website_title");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string website_url = 12;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_website_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCuratorPreferences.website_url");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string discussion_url = 13;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_discussion_url();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCuratorPreferences.discussion_url");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional bool show_broadcast = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_show_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCuratorPreferences)
  return target;
}

::size_t CCuratorPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCuratorPreferences)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated uint32 tagids_curated = 9;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tagids_curated())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_tagids_curated_size());
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint32 tagids_filtered = 10;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tagids_filtered())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_tagids_filtered_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string website_title = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_website_title());
    }

    // optional string website_url = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_website_url());
    }

    // optional string discussion_url = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_discussion_url());
    }

    // optional uint32 supported_languages = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_supported_languages());
    }

    // optional bool platform_windows = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool platform_mac = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool platform_linux = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool vr_content = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 timestamp_updated = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_timestamp_updated());
    }

    // optional bool adult_content_violence = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool adult_content_sex = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool show_broadcast = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CCuratorPreferences::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CCuratorPreferences*>(&to_msg);
  auto& from = static_cast<const CCuratorPreferences&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCuratorPreferences)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tagids_curated()->MergeFrom(from._internal_tagids_curated());
  _this->_internal_mutable_tagids_filtered()->MergeFrom(from._internal_tagids_filtered());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_website_title(from._internal_website_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_website_url(from._internal_website_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_discussion_url(from._internal_discussion_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.supported_languages_ = from._impl_.supported_languages_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.platform_windows_ = from._impl_.platform_windows_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.platform_mac_ = from._impl_.platform_mac_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.platform_linux_ = from._impl_.platform_linux_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.vr_content_ = from._impl_.vr_content_;
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.timestamp_updated_ = from._impl_.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.adult_content_violence_ = from._impl_.adult_content_violence_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.adult_content_sex_ = from._impl_.adult_content_sex_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.show_broadcast_ = from._impl_.show_broadcast_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCuratorPreferences::CopyFrom(const CCuratorPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCuratorPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CCuratorPreferences::InternalSwap(CCuratorPreferences* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tagids_curated_.InternalSwap(&other->_impl_.tagids_curated_);
  _impl_.tagids_filtered_.InternalSwap(&other->_impl_.tagids_filtered_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.website_title_, &other->_impl_.website_title_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.website_url_, &other->_impl_.website_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.discussion_url_, &other->_impl_.discussion_url_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.show_broadcast_)
      + sizeof(CCuratorPreferences::_impl_.show_broadcast_)
      - PROTOBUF_FIELD_OFFSET(CCuratorPreferences, _impl_.supported_languages_)>(
          reinterpret_cast<char*>(&_impl_.supported_languages_),
          reinterpret_cast<char*>(&other->_impl_.supported_languages_));
}

::google::protobuf::Metadata CCuratorPreferences::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CLocalizationToken::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CLocalizationToken>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_._has_bits_);
};

CLocalizationToken::CLocalizationToken(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLocalizationToken)
}
inline PROTOBUF_NDEBUG_INLINE CLocalizationToken::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CLocalizationToken& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        localized_string_(arena, from.localized_string_) {}

CLocalizationToken::CLocalizationToken(
    ::google::protobuf::Arena* arena,
    const CLocalizationToken& from)
    : ::google::protobuf::Message(arena) {
  CLocalizationToken* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.language_ = from._impl_.language_;

  // @@protoc_insertion_point(copy_constructor:CLocalizationToken)
}
inline PROTOBUF_NDEBUG_INLINE CLocalizationToken::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        localized_string_(arena) {}

inline void CLocalizationToken::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.language_ = {};
}
CLocalizationToken::~CLocalizationToken() {
  // @@protoc_insertion_point(destructor:CLocalizationToken)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CLocalizationToken::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.localized_string_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CLocalizationToken::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_._cached_size_),
              false,
          },
          &CLocalizationToken::MergeImpl,
          &CLocalizationToken::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> CLocalizationToken::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CLocalizationToken_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CLocalizationToken>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string localized_string = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_.localized_string_)}},
    // optional uint32 language = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CLocalizationToken, _impl_.language_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_.language_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 language = 1;
    {PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_.language_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string localized_string = 2;
    {PROTOBUF_FIELD_OFFSET(CLocalizationToken, _impl_.localized_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\20\0\0\0\0\0"
    "CLocalizationToken"
    "localized_string"
  }},
};

PROTOBUF_NOINLINE void CLocalizationToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CLocalizationToken)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.localized_string_.ClearNonDefaultToEmpty();
  }
  _impl_.language_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CLocalizationToken::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLocalizationToken)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_language(), target);
  }

  // optional string localized_string = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_localized_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CLocalizationToken.localized_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLocalizationToken)
  return target;
}

::size_t CLocalizationToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLocalizationToken)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string localized_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_localized_string());
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CLocalizationToken::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CLocalizationToken*>(&to_msg);
  auto& from = static_cast<const CLocalizationToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLocalizationToken)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_localized_string(from._internal_localized_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CLocalizationToken::CopyFrom(const CLocalizationToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLocalizationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CLocalizationToken::InternalSwap(CLocalizationToken* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.localized_string_, &other->_impl_.localized_string_, arena);
        swap(_impl_.language_, other->_impl_.language_);
}

::google::protobuf::Metadata CLocalizationToken::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CClanEventUserNewsTuple::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CClanEventUserNewsTuple>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_._has_bits_);
};

CClanEventUserNewsTuple::CClanEventUserNewsTuple(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClanEventUserNewsTuple)
}
CClanEventUserNewsTuple::CClanEventUserNewsTuple(
    ::google::protobuf::Arena* arena, const CClanEventUserNewsTuple& from)
    : CClanEventUserNewsTuple(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CClanEventUserNewsTuple::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CClanEventUserNewsTuple::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_gid_),
           0,
           offsetof(Impl_, rtime32_last_modified_) -
               offsetof(Impl_, event_gid_) +
               sizeof(Impl_::rtime32_last_modified_));
}
CClanEventUserNewsTuple::~CClanEventUserNewsTuple() {
  // @@protoc_insertion_point(destructor:CClanEventUserNewsTuple)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CClanEventUserNewsTuple::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CClanEventUserNewsTuple::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_._cached_size_),
              false,
          },
          &CClanEventUserNewsTuple::MergeImpl,
          &CClanEventUserNewsTuple::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 0, 2> CClanEventUserNewsTuple::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CClanEventUserNewsTuple_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CClanEventUserNewsTuple>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 clanid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.clanid_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.clanid_)}},
    // optional fixed64 event_gid = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.event_gid_)}},
    // optional fixed64 announcement_gid = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.announcement_gid_)}},
    // optional uint32 rtime_start = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.rtime_start_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime_start_)}},
    // optional uint32 rtime_end = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.rtime_end_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime_end_)}},
    // optional uint32 priority_score = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.priority_score_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.priority_score_)}},
    // optional uint32 type = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.type_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.type_)}},
    // optional uint32 clamp_range_slot = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.clamp_range_slot_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.clamp_range_slot_)}},
    // optional uint32 appid = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.appid_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.appid_)}},
    // optional uint32 rtime32_last_modified = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventUserNewsTuple, _impl_.rtime32_last_modified_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime32_last_modified_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 clanid = 1;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.clanid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 event_gid = 2;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.event_gid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 announcement_gid = 3;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.announcement_gid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 rtime_start = 4;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime_start_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rtime_end = 5;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime_end_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 priority_score = 6;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.priority_score_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 type = 7;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.type_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 clamp_range_slot = 8;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.clamp_range_slot_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 appid = 9;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.appid_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rtime32_last_modified = 10;
    {PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime32_last_modified_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CClanEventUserNewsTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanEventUserNewsTuple)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.event_gid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.clamp_range_slot_) -
        reinterpret_cast<char*>(&_impl_.event_gid_)) + sizeof(_impl_.clamp_range_slot_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.rtime32_last_modified_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.rtime32_last_modified_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CClanEventUserNewsTuple::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanEventUserNewsTuple)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 clanid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_clanid(), target);
  }

  // optional fixed64 event_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_event_gid(), target);
  }

  // optional fixed64 announcement_gid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this->_internal_announcement_gid(), target);
  }

  // optional uint32 rtime_start = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_rtime_start(), target);
  }

  // optional uint32 rtime_end = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_rtime_end(), target);
  }

  // optional uint32 priority_score = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_priority_score(), target);
  }

  // optional uint32 type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_type(), target);
  }

  // optional uint32 clamp_range_slot = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_clamp_range_slot(), target);
  }

  // optional uint32 appid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_appid(), target);
  }

  // optional uint32 rtime32_last_modified = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_rtime32_last_modified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanEventUserNewsTuple)
  return target;
}

::size_t CClanEventUserNewsTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanEventUserNewsTuple)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 event_gid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 9;
    }

    // optional uint32 clanid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_clanid());
    }

    // optional uint32 rtime_start = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime_start());
    }

    // optional fixed64 announcement_gid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 9;
    }

    // optional uint32 rtime_end = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime_end());
    }

    // optional uint32 priority_score = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_priority_score());
    }

    // optional uint32 type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_type());
    }

    // optional uint32 clamp_range_slot = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_clamp_range_slot());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 appid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional uint32 rtime32_last_modified = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime32_last_modified());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CClanEventUserNewsTuple::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CClanEventUserNewsTuple*>(&to_msg);
  auto& from = static_cast<const CClanEventUserNewsTuple&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CClanEventUserNewsTuple)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_gid_ = from._impl_.event_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.clanid_ = from._impl_.clanid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rtime_start_ = from._impl_.rtime_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.announcement_gid_ = from._impl_.announcement_gid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rtime_end_ = from._impl_.rtime_end_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.priority_score_ = from._impl_.priority_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.clamp_range_slot_ = from._impl_.clamp_range_slot_;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.rtime32_last_modified_ = from._impl_.rtime32_last_modified_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CClanEventUserNewsTuple::CopyFrom(const CClanEventUserNewsTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanEventUserNewsTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CClanEventUserNewsTuple::InternalSwap(CClanEventUserNewsTuple* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.rtime32_last_modified_)
      + sizeof(CClanEventUserNewsTuple::_impl_.rtime32_last_modified_)
      - PROTOBUF_FIELD_OFFSET(CClanEventUserNewsTuple, _impl_.event_gid_)>(
          reinterpret_cast<char*>(&_impl_.event_gid_),
          reinterpret_cast<char*>(&other->_impl_.event_gid_));
}

::google::protobuf::Metadata CClanEventUserNewsTuple::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CClanMatchEventByRange::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CClanMatchEventByRange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_._has_bits_);
};

CClanMatchEventByRange::CClanMatchEventByRange(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClanMatchEventByRange)
}
inline PROTOBUF_NDEBUG_INLINE CClanMatchEventByRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CClanMatchEventByRange& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        events_{visibility, arena, from.events_} {}

CClanMatchEventByRange::CClanMatchEventByRange(
    ::google::protobuf::Arena* arena,
    const CClanMatchEventByRange& from)
    : ::google::protobuf::Message(arena) {
  CClanMatchEventByRange* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rtime_before_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rtime_before_),
           offsetof(Impl_, qualified_) -
               offsetof(Impl_, rtime_before_) +
               sizeof(Impl_::qualified_));

  // @@protoc_insertion_point(copy_constructor:CClanMatchEventByRange)
}
inline PROTOBUF_NDEBUG_INLINE CClanMatchEventByRange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        events_{visibility, arena} {}

inline void CClanMatchEventByRange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rtime_before_),
           0,
           offsetof(Impl_, qualified_) -
               offsetof(Impl_, rtime_before_) +
               sizeof(Impl_::qualified_));
}
CClanMatchEventByRange::~CClanMatchEventByRange() {
  // @@protoc_insertion_point(destructor:CClanMatchEventByRange)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CClanMatchEventByRange::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CClanMatchEventByRange::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_._cached_size_),
              false,
          },
          &CClanMatchEventByRange::MergeImpl,
          &CClanMatchEventByRange::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> CClanMatchEventByRange::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CClanMatchEventByRange_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CClanMatchEventByRange>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CClanEventUserNewsTuple events = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.events_)}},
    // optional uint32 rtime_before = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanMatchEventByRange, _impl_.rtime_before_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.rtime_before_)}},
    // optional uint32 rtime_after = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanMatchEventByRange, _impl_.rtime_after_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.rtime_after_)}},
    // optional uint32 qualified = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanMatchEventByRange, _impl_.qualified_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.qualified_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 rtime_before = 1;
    {PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.rtime_before_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rtime_after = 2;
    {PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.rtime_after_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 qualified = 3;
    {PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.qualified_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CClanEventUserNewsTuple events = 4;
    {PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.events_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CClanEventUserNewsTuple>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CClanMatchEventByRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanMatchEventByRange)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.rtime_before_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.qualified_) -
        reinterpret_cast<char*>(&_impl_.rtime_before_)) + sizeof(_impl_.qualified_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CClanMatchEventByRange::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanMatchEventByRange)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 rtime_before = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rtime_before(), target);
  }

  // optional uint32 rtime_after = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_rtime_after(), target);
  }

  // optional uint32 qualified = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_qualified(), target);
  }

  // repeated .CClanEventUserNewsTuple events = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_events_size());
       i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanMatchEventByRange)
  return target;
}

::size_t CClanMatchEventByRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanMatchEventByRange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .CClanEventUserNewsTuple events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 rtime_before = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime_before());
    }

    // optional uint32 rtime_after = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime_after());
    }

    // optional uint32 qualified = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_qualified());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CClanMatchEventByRange::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CClanMatchEventByRange*>(&to_msg);
  auto& from = static_cast<const CClanMatchEventByRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CClanMatchEventByRange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rtime_before_ = from._impl_.rtime_before_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rtime_after_ = from._impl_.rtime_after_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.qualified_ = from._impl_.qualified_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CClanMatchEventByRange::CopyFrom(const CClanMatchEventByRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanMatchEventByRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CClanMatchEventByRange::InternalSwap(CClanMatchEventByRange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.qualified_)
      + sizeof(CClanMatchEventByRange::_impl_.qualified_)
      - PROTOBUF_FIELD_OFFSET(CClanMatchEventByRange, _impl_.rtime_before_)>(
          reinterpret_cast<char*>(&_impl_.rtime_before_),
          reinterpret_cast<char*>(&other->_impl_.rtime_before_));
}

::google::protobuf::Metadata CClanMatchEventByRange::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CCommunity_ClanAnnouncementInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CCommunity_ClanAnnouncementInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_._has_bits_);
};

CCommunity_ClanAnnouncementInfo::CCommunity_ClanAnnouncementInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_ClanAnnouncementInfo)
}
inline PROTOBUF_NDEBUG_INLINE CCommunity_ClanAnnouncementInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CCommunity_ClanAnnouncementInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tags_{visibility, arena, from.tags_},
        headline_(arena, from.headline_),
        body_(arena, from.body_) {}

CCommunity_ClanAnnouncementInfo::CCommunity_ClanAnnouncementInfo(
    ::google::protobuf::Arena* arena,
    const CCommunity_ClanAnnouncementInfo& from)
    : ::google::protobuf::Message(arena) {
  CCommunity_ClanAnnouncementInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, gid_),
           offsetof(Impl_, ban_check_result_) -
               offsetof(Impl_, gid_) +
               sizeof(Impl_::ban_check_result_));

  // @@protoc_insertion_point(copy_constructor:CCommunity_ClanAnnouncementInfo)
}
inline PROTOBUF_NDEBUG_INLINE CCommunity_ClanAnnouncementInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tags_{visibility, arena},
        headline_(arena),
        body_(arena) {}

inline void CCommunity_ClanAnnouncementInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gid_),
           0,
           offsetof(Impl_, ban_check_result_) -
               offsetof(Impl_, gid_) +
               sizeof(Impl_::ban_check_result_));
}
CCommunity_ClanAnnouncementInfo::~CCommunity_ClanAnnouncementInfo() {
  // @@protoc_insertion_point(destructor:CCommunity_ClanAnnouncementInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCommunity_ClanAnnouncementInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.headline_.Destroy();
  _impl_.body_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CCommunity_ClanAnnouncementInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_._cached_size_),
              false,
          },
          &CCommunity_ClanAnnouncementInfo::MergeImpl,
          &CCommunity_ClanAnnouncementInfo::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 1, 72, 2> CCommunity_ClanAnnouncementInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CCommunity_ClanAnnouncementInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CCommunity_ClanAnnouncementInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
    {::_pbi::TcParser::FastEvS2,
     {384, 14, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.ban_check_result_)}},
    // optional uint64 gid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.gid_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.gid_)}},
    // optional uint64 clanid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.clanid_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.clanid_)}},
    // optional uint64 posterid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.posterid_), 4>(),
     {24, 4, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.posterid_)}},
    // optional string headline = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.headline_)}},
    // optional uint32 posttime = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.posttime_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.posttime_)}},
    // optional uint32 updatetime = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.updatetime_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.updatetime_)}},
    // optional string body = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.body_)}},
    // optional int32 commentcount = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.commentcount_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.commentcount_)}},
    // repeated string tags = 9;
    {::_pbi::TcParser::FastSR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.tags_)}},
    // optional int32 language = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.language_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.language_)}},
    // optional bool hidden = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.hidden_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.hidden_)}},
    // optional fixed64 forum_topic_id = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 9, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.forum_topic_id_)}},
    // optional fixed64 event_gid = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 12, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.event_gid_)}},
    // optional int32 voteupcount = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.voteupcount_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.voteupcount_)}},
    // optional int32 votedowncount = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CCommunity_ClanAnnouncementInfo, _impl_.votedowncount_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.votedowncount_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 gid = 1;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.gid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 clanid = 2;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.clanid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 posterid = 3;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.posterid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string headline = 4;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.headline_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 posttime = 5;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.posttime_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 updatetime = 6;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.updatetime_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string body = 7;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.body_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 commentcount = 8;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.commentcount_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated string tags = 9;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.tags_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
    // optional int32 language = 10;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.language_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool hidden = 11;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.hidden_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional fixed64 forum_topic_id = 12;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.forum_topic_id_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 event_gid = 13;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.event_gid_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional int32 voteupcount = 14;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.voteupcount_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 votedowncount = 15;
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.votedowncount_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
    {PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.ban_check_result_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnum)},
  }}, {{
    {::_pbi::FieldAuxEnumData{}, ::EBanContentCheckResult_internal_data_},
  }}, {{
    "\37\0\0\0\10\0\0\4\0\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CCommunity_ClanAnnouncementInfo"
    "headline"
    "body"
    "tags"
  }},
};

PROTOBUF_NOINLINE void CCommunity_ClanAnnouncementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_ClanAnnouncementInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.gid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.commentcount_) -
        reinterpret_cast<char*>(&_impl_.gid_)) + sizeof(_impl_.commentcount_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.language_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ban_check_result_) -
        reinterpret_cast<char*>(&_impl_.language_)) + sizeof(_impl_.ban_check_result_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CCommunity_ClanAnnouncementInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_ClanAnnouncementInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 gid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_gid(), target);
  }

  // optional uint64 clanid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_clanid(), target);
  }

  // optional uint64 posterid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_posterid(), target);
  }

  // optional string headline = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_headline();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCommunity_ClanAnnouncementInfo.headline");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional uint32 posttime = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_posttime(), target);
  }

  // optional uint32 updatetime = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_updatetime(), target);
  }

  // optional string body = 7;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_body();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCommunity_ClanAnnouncementInfo.body");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional int32 commentcount = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_commentcount(), target);
  }

  // repeated string tags = 9;
  for (int i = 0, n = this->_internal_tags_size(); i < n; ++i) {
    const auto& s = this->_internal_tags().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CCommunity_ClanAnnouncementInfo.tags");
    target = stream->WriteString(9, s, target);
  }

  // optional int32 language = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_language(), target);
  }

  // optional bool hidden = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_hidden(), target);
  }

  // optional fixed64 forum_topic_id = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        12, this->_internal_forum_topic_id(), target);
  }

  // optional fixed64 event_gid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        13, this->_internal_event_gid(), target);
  }

  // optional int32 voteupcount = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_voteupcount(), target);
  }

  // optional int32 votedowncount = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_votedowncount(), target);
  }

  // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_ban_check_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_ClanAnnouncementInfo)
  return target;
}

::size_t CCommunity_ClanAnnouncementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_ClanAnnouncementInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string tags = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_tags().size());
  for (int i = 0, n = _internal_tags().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_tags().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string headline = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_headline());
    }

    // optional string body = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_body());
    }

    // optional uint64 gid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_gid());
    }

    // optional uint64 clanid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_clanid());
    }

    // optional uint64 posterid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_posterid());
    }

    // optional uint32 posttime = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_posttime());
    }

    // optional uint32 updatetime = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_updatetime());
    }

    // optional int32 commentcount = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_commentcount());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int32 language = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_language());
    }

    // optional fixed64 forum_topic_id = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 9;
    }

    // optional bool hidden = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional int32 voteupcount = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_voteupcount());
    }

    // optional fixed64 event_gid = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 9;
    }

    // optional int32 votedowncount = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_votedowncount());
    }

    // optional .EBanContentCheckResult ban_check_result = 16 [default = k_EBanContentCheckResult_NotScanned];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_ban_check_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CCommunity_ClanAnnouncementInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CCommunity_ClanAnnouncementInfo*>(&to_msg);
  auto& from = static_cast<const CCommunity_ClanAnnouncementInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_ClanAnnouncementInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tags()->MergeFrom(from._internal_tags());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_headline(from._internal_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gid_ = from._impl_.gid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.clanid_ = from._impl_.clanid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.posterid_ = from._impl_.posterid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.posttime_ = from._impl_.posttime_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.updatetime_ = from._impl_.updatetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.commentcount_ = from._impl_.commentcount_;
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.forum_topic_id_ = from._impl_.forum_topic_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.voteupcount_ = from._impl_.voteupcount_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.event_gid_ = from._impl_.event_gid_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.votedowncount_ = from._impl_.votedowncount_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ban_check_result_ = from._impl_.ban_check_result_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCommunity_ClanAnnouncementInfo::CopyFrom(const CCommunity_ClanAnnouncementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_ClanAnnouncementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CCommunity_ClanAnnouncementInfo::InternalSwap(CCommunity_ClanAnnouncementInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.headline_, &other->_impl_.headline_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, &other->_impl_.body_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.ban_check_result_)
      + sizeof(CCommunity_ClanAnnouncementInfo::_impl_.ban_check_result_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_ClanAnnouncementInfo, _impl_.gid_)>(
          reinterpret_cast<char*>(&_impl_.gid_),
          reinterpret_cast<char*>(&other->_impl_.gid_));
}

::google::protobuf::Metadata CCommunity_ClanAnnouncementInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CClanEventData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CClanEventData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_._has_bits_);
};

CClanEventData::CClanEventData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClanEventData)
}
inline PROTOBUF_NDEBUG_INLINE CClanEventData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CClanEventData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        referenced_appids_{visibility, arena, from.referenced_appids_},
        event_name_(arena, from.event_name_),
        server_address_(arena, from.server_address_),
        server_password_(arena, from.server_password_),
        event_notes_(arena, from.event_notes_),
        jsondata_(arena, from.jsondata_),
        build_branch_(arena, from.build_branch_) {}

CClanEventData::CClanEventData(
    ::google::protobuf::Arena* arena,
    const CClanEventData& from)
    : ::google::protobuf::Message(arena) {
  CClanEventData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.announcement_body_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::CCommunity_ClanAnnouncementInfo>(
                              arena, *from._impl_.announcement_body_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, gid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, gid_),
           offsetof(Impl_, event_type_) -
               offsetof(Impl_, gid_) +
               sizeof(Impl_::event_type_));

  // @@protoc_insertion_point(copy_constructor:CClanEventData)
}
inline PROTOBUF_NDEBUG_INLINE CClanEventData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        referenced_appids_{visibility, arena},
        event_name_(arena),
        server_address_(arena),
        server_password_(arena),
        event_notes_(arena),
        jsondata_(arena),
        build_branch_(arena),
        event_type_{static_cast< ::EProtoClanEventType >(1)} {}

inline void CClanEventData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, announcement_body_),
           0,
           offsetof(Impl_, build_id_) -
               offsetof(Impl_, announcement_body_) +
               sizeof(Impl_::build_id_));
}
CClanEventData::~CClanEventData() {
  // @@protoc_insertion_point(destructor:CClanEventData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CClanEventData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.event_name_.Destroy();
  _impl_.server_address_.Destroy();
  _impl_.server_password_.Destroy();
  _impl_.event_notes_.Destroy();
  _impl_.jsondata_.Destroy();
  _impl_.build_branch_.Destroy();
  delete _impl_.announcement_body_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CClanEventData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_._cached_size_),
              false,
          },
          &CClanEventData::MergeImpl,
          &CClanEventData::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 30, 2, 117, 2> CClanEventData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_._has_bits_),
    0, // no _extensions_
    30, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3221225472,  // skipmap
    offsetof(decltype(_table_), field_entries),
    30,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CClanEventData_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CClanEventData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 gid = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 7, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.gid_)}},
    // optional fixed64 clan_steamid = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 8, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.clan_steamid_)}},
    // optional string event_name = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_name_)}},
    // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
    {::_pbi::TcParser::FastEr1S1,
     {32, 28, 35, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_type_)}},
    // optional uint32 appid = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventData, _impl_.appid_), 9>(),
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.appid_)}},
    // optional string server_address = 6;
    {::_pbi::TcParser::FastSS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.server_address_)}},
    // optional string server_password = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 2, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.server_password_)}},
    // optional uint32 rtime32_start_time = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventData, _impl_.rtime32_start_time_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_start_time_)}},
    // optional uint32 rtime32_end_time = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventData, _impl_.rtime32_end_time_), 11>(),
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_end_time_)}},
    // optional int32 comment_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CClanEventData, _impl_.comment_count_), 12>(),
     {80, 12, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.comment_count_)}},
    // optional fixed64 creator_steamid = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 13, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.creator_steamid_)}},
    // optional fixed64 last_update_steamid = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 14, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.last_update_steamid_)}},
    // optional string event_notes = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 3, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_notes_)}},
    // optional string jsondata = 14;
    {::_pbi::TcParser::FastSS1,
     {114, 4, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.jsondata_)}},
    // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.announcement_body_)}},
    // optional bool published = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 15, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.published_)}},
    // optional bool hidden = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 16, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.hidden_)}},
    // optional uint32 rtime32_visibility_start = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 17, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_visibility_start_)}},
    // optional uint32 rtime32_visibility_end = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_visibility_end_)}},
    // optional uint32 broadcaster_accountid = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.broadcaster_accountid_)}},
    // optional uint32 follower_count = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 20, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.follower_count_)}},
    // optional uint32 ignore_count = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 21, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.ignore_count_)}},
    // optional fixed64 forum_topic_id = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 22, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.forum_topic_id_)}},
    // optional uint32 rtime32_last_modified = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 24, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_last_modified_)}},
    // optional fixed64 news_post_gid = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 23, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.news_post_gid_)}},
    // optional uint32 rtime_mod_reviewed = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 25, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime_mod_reviewed_)}},
    // optional uint32 featured_app_tagid = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 26, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.featured_app_tagid_)}},
    // repeated uint32 referenced_appids = 28;
    {::_pbi::TcParser::FastV32R2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.referenced_appids_)}},
    // optional uint32 build_id = 29;
    {::_pbi::TcParser::FastV32S2,
     {488, 27, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.build_id_)}},
    // optional string build_branch = 30;
    {::_pbi::TcParser::FastSS2,
     {498, 5, 0, PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.build_branch_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed64 gid = 1;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.gid_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 clan_steamid = 2;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.clan_steamid_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string event_name = 3;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_type_), _Internal::kHasBitsOffset + 28, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional uint32 appid = 5;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.appid_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string server_address = 6;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.server_address_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string server_password = 7;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.server_password_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 rtime32_start_time = 8;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_start_time_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rtime32_end_time = 9;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_end_time_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 comment_count = 10;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.comment_count_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional fixed64 creator_steamid = 11;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.creator_steamid_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 last_update_steamid = 12;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.last_update_steamid_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string event_notes = 13;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_notes_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string jsondata = 14;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.jsondata_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.announcement_body_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool published = 16;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.published_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool hidden = 17;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.hidden_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 rtime32_visibility_start = 18;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_visibility_start_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 rtime32_visibility_end = 19;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_visibility_end_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 broadcaster_accountid = 20;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.broadcaster_accountid_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 follower_count = 21;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.follower_count_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ignore_count = 22;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.ignore_count_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 forum_topic_id = 23;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.forum_topic_id_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 rtime32_last_modified = 24;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime32_last_modified_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 news_post_gid = 25;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.news_post_gid_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 rtime_mod_reviewed = 26;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.rtime_mod_reviewed_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 featured_app_tagid = 27;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.featured_app_tagid_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 referenced_appids = 28;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.referenced_appids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional uint32 build_id = 29;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.build_id_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string build_branch = 30;
    {PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.build_branch_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CCommunity_ClanAnnouncementInfo>()},
    {1, 35},
  }}, {{
    "\16\0\0\12\0\0\16\17\0\0\0\0\0\13\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\14\0"
    "CClanEventData"
    "event_name"
    "server_address"
    "server_password"
    "event_notes"
    "jsondata"
    "build_branch"
  }},
};

PROTOBUF_NOINLINE void CClanEventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CClanEventData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.referenced_appids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.server_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.server_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.event_notes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.jsondata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.build_branch_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.announcement_body_ != nullptr);
      _impl_.announcement_body_->Clear();
    }
  }
  _impl_.gid_ = ::uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.clan_steamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.published_) -
        reinterpret_cast<char*>(&_impl_.clan_steamid_)) + sizeof(_impl_.published_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.hidden_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.news_post_gid_) -
        reinterpret_cast<char*>(&_impl_.hidden_)) + sizeof(_impl_.news_post_gid_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&_impl_.rtime32_last_modified_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.build_id_) -
        reinterpret_cast<char*>(&_impl_.rtime32_last_modified_)) + sizeof(_impl_.build_id_));
    _impl_.event_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CClanEventData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClanEventData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 gid = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this->_internal_gid(), target);
  }

  // optional fixed64 clan_steamid = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_clan_steamid(), target);
  }

  // optional string event_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_event_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.event_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_event_type(), target);
  }

  // optional uint32 appid = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_appid(), target);
  }

  // optional string server_address = 6;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_server_address();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.server_address");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string server_password = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_server_password();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.server_password");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional uint32 rtime32_start_time = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_rtime32_start_time(), target);
  }

  // optional uint32 rtime32_end_time = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_rtime32_end_time(), target);
  }

  // optional int32 comment_count = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_comment_count(), target);
  }

  // optional fixed64 creator_steamid = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        11, this->_internal_creator_steamid(), target);
  }

  // optional fixed64 last_update_steamid = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        12, this->_internal_last_update_steamid(), target);
  }

  // optional string event_notes = 13;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_event_notes();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.event_notes");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional string jsondata = 14;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_jsondata();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.jsondata");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *_impl_.announcement_body_, _impl_.announcement_body_->GetCachedSize(), target, stream);
  }

  // optional bool published = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_published(), target);
  }

  // optional bool hidden = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_hidden(), target);
  }

  // optional uint32 rtime32_visibility_start = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this->_internal_rtime32_visibility_start(), target);
  }

  // optional uint32 rtime32_visibility_end = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this->_internal_rtime32_visibility_end(), target);
  }

  // optional uint32 broadcaster_accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this->_internal_broadcaster_accountid(), target);
  }

  // optional uint32 follower_count = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        21, this->_internal_follower_count(), target);
  }

  // optional uint32 ignore_count = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        22, this->_internal_ignore_count(), target);
  }

  // optional fixed64 forum_topic_id = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        23, this->_internal_forum_topic_id(), target);
  }

  // optional uint32 rtime32_last_modified = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        24, this->_internal_rtime32_last_modified(), target);
  }

  // optional fixed64 news_post_gid = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        25, this->_internal_news_post_gid(), target);
  }

  // optional uint32 rtime_mod_reviewed = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        26, this->_internal_rtime_mod_reviewed(), target);
  }

  // optional uint32 featured_app_tagid = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        27, this->_internal_featured_app_tagid(), target);
  }

  // repeated uint32 referenced_appids = 28;
  for (int i = 0, n = this->_internal_referenced_appids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        28, this->_internal_referenced_appids().Get(i), target);
  }

  // optional uint32 build_id = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        29, this->_internal_build_id(), target);
  }

  // optional string build_branch = 30;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_build_branch();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CClanEventData.build_branch");
    target = stream->WriteStringMaybeAliased(30, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClanEventData)
  return target;
}

::size_t CClanEventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClanEventData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated uint32 referenced_appids = 28;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_referenced_appids())
    ;
    std::size_t tag_size = std::size_t{2} *
        ::_pbi::FromIntSize(this->_internal_referenced_appids_size());
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string event_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_event_name());
    }

    // optional string server_address = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_server_address());
    }

    // optional string server_password = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_server_password());
    }

    // optional string event_notes = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_event_notes());
    }

    // optional string jsondata = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_jsondata());
    }

    // optional string build_branch = 30;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_build_branch());
    }

    // optional .CCommunity_ClanAnnouncementInfo announcement_body = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.announcement_body_);
    }

    // optional fixed64 gid = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 9;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed64 clan_steamid = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 9;
    }

    // optional uint32 appid = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_appid());
    }

    // optional uint32 rtime32_start_time = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime32_start_time());
    }

    // optional uint32 rtime32_end_time = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_rtime32_end_time());
    }

    // optional int32 comment_count = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_comment_count());
    }

    // optional fixed64 creator_steamid = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 9;
    }

    // optional fixed64 last_update_steamid = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 9;
    }

    // optional bool published = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 3;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool hidden = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 3;
    }

    // optional uint32 rtime32_visibility_start = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rtime32_visibility_start());
    }

    // optional uint32 rtime32_visibility_end = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rtime32_visibility_end());
    }

    // optional uint32 broadcaster_accountid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_broadcaster_accountid());
    }

    // optional uint32 follower_count = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_follower_count());
    }

    // optional uint32 ignore_count = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_ignore_count());
    }

    // optional fixed64 forum_topic_id = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 10;
    }

    // optional fixed64 news_post_gid = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 10;
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional uint32 rtime32_last_modified = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rtime32_last_modified());
    }

    // optional uint32 rtime_mod_reviewed = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_rtime_mod_reviewed());
    }

    // optional uint32 featured_app_tagid = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_featured_app_tagid());
    }

    // optional uint32 build_id = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_build_id());
    }

    // optional .EProtoClanEventType event_type = 4 [default = k_EClanOtherEvent];
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CClanEventData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CClanEventData*>(&to_msg);
  auto& from = static_cast<const CClanEventData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CClanEventData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_referenced_appids()->MergeFrom(from._internal_referenced_appids());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_server_address(from._internal_server_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_server_password(from._internal_server_password());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_event_notes(from._internal_event_notes());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_jsondata(from._internal_jsondata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_build_branch(from._internal_build_branch());
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.announcement_body_ != nullptr);
      if (_this->_impl_.announcement_body_ == nullptr) {
        _this->_impl_.announcement_body_ =
            ::google::protobuf::Message::CopyConstruct<::CCommunity_ClanAnnouncementInfo>(arena, *from._impl_.announcement_body_);
      } else {
        _this->_impl_.announcement_body_->MergeFrom(*from._impl_.announcement_body_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.gid_ = from._impl_.gid_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.clan_steamid_ = from._impl_.clan_steamid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.rtime32_start_time_ = from._impl_.rtime32_start_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.rtime32_end_time_ = from._impl_.rtime32_end_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.comment_count_ = from._impl_.comment_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.creator_steamid_ = from._impl_.creator_steamid_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.last_update_steamid_ = from._impl_.last_update_steamid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.published_ = from._impl_.published_;
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.hidden_ = from._impl_.hidden_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.rtime32_visibility_start_ = from._impl_.rtime32_visibility_start_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.rtime32_visibility_end_ = from._impl_.rtime32_visibility_end_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.broadcaster_accountid_ = from._impl_.broadcaster_accountid_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.follower_count_ = from._impl_.follower_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ignore_count_ = from._impl_.ignore_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.forum_topic_id_ = from._impl_.forum_topic_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.news_post_gid_ = from._impl_.news_post_gid_;
    }
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.rtime32_last_modified_ = from._impl_.rtime32_last_modified_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.rtime_mod_reviewed_ = from._impl_.rtime_mod_reviewed_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.featured_app_tagid_ = from._impl_.featured_app_tagid_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.build_id_ = from._impl_.build_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CClanEventData::CopyFrom(const CClanEventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClanEventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CClanEventData::InternalSwap(CClanEventData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.referenced_appids_.InternalSwap(&other->_impl_.referenced_appids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_name_, &other->_impl_.event_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_address_, &other->_impl_.server_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_password_, &other->_impl_.server_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_notes_, &other->_impl_.event_notes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.jsondata_, &other->_impl_.jsondata_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_branch_, &other->_impl_.build_branch_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.event_type_)
      + sizeof(CClanEventData::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(CClanEventData, _impl_.announcement_body_)>(
          reinterpret_cast<char*>(&_impl_.announcement_body_),
          reinterpret_cast<char*>(&other->_impl_.announcement_body_));
}

::google::protobuf::Metadata CClanEventData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CBilling_Address::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CBilling_Address>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_._has_bits_);
};

CBilling_Address::CBilling_Address(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBilling_Address)
}
inline PROTOBUF_NDEBUG_INLINE CBilling_Address::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CBilling_Address& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        first_name_(arena, from.first_name_),
        last_name_(arena, from.last_name_),
        address1_(arena, from.address1_),
        address2_(arena, from.address2_),
        city_(arena, from.city_),
        us_state_(arena, from.us_state_),
        country_code_(arena, from.country_code_),
        postcode_(arena, from.postcode_),
        phone_(arena, from.phone_) {}

CBilling_Address::CBilling_Address(
    ::google::protobuf::Arena* arena,
    const CBilling_Address& from)
    : ::google::protobuf::Message(arena) {
  CBilling_Address* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.zip_plus4_ = from._impl_.zip_plus4_;

  // @@protoc_insertion_point(copy_constructor:CBilling_Address)
}
inline PROTOBUF_NDEBUG_INLINE CBilling_Address::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        first_name_(arena),
        last_name_(arena),
        address1_(arena),
        address2_(arena),
        city_(arena),
        us_state_(arena),
        country_code_(arena),
        postcode_(arena),
        phone_(arena) {}

inline void CBilling_Address::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.zip_plus4_ = {};
}
CBilling_Address::~CBilling_Address() {
  // @@protoc_insertion_point(destructor:CBilling_Address)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CBilling_Address::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.first_name_.Destroy();
  _impl_.last_name_.Destroy();
  _impl_.address1_.Destroy();
  _impl_.address2_.Destroy();
  _impl_.city_.Destroy();
  _impl_.us_state_.Destroy();
  _impl_.country_code_.Destroy();
  _impl_.postcode_.Destroy();
  _impl_.phone_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CBilling_Address::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_._cached_size_),
              false,
          },
          &CBilling_Address::MergeImpl,
          &CBilling_Address::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 105, 2> CBilling_Address::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CBilling_Address_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CBilling_Address>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string first_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.first_name_)}},
    // optional string last_name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.last_name_)}},
    // optional string address1 = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.address1_)}},
    // optional string address2 = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.address2_)}},
    // optional string city = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.city_)}},
    // optional string us_state = 6;
    {::_pbi::TcParser::FastSS1,
     {50, 5, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.us_state_)}},
    // optional string country_code = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 6, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.country_code_)}},
    // optional string postcode = 8;
    {::_pbi::TcParser::FastSS1,
     {66, 7, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.postcode_)}},
    // optional int32 zip_plus4 = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBilling_Address, _impl_.zip_plus4_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.zip_plus4_)}},
    // optional string phone = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 8, 0, PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.phone_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string first_name = 1;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.first_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string last_name = 2;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.last_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string address1 = 3;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.address1_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string address2 = 4;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.address2_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string city = 5;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.city_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string us_state = 6;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.us_state_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string country_code = 7;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.country_code_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string postcode = 8;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.postcode_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 zip_plus4 = 9;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.zip_plus4_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string phone = 10;
    {PROTOBUF_FIELD_OFFSET(CBilling_Address, _impl_.phone_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\12\11\10\10\4\10\14\10\0\5\0\0\0\0\0"
    "CBilling_Address"
    "first_name"
    "last_name"
    "address1"
    "address2"
    "city"
    "us_state"
    "country_code"
    "postcode"
    "phone"
  }},
};

PROTOBUF_NOINLINE void CBilling_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:CBilling_Address)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.first_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.last_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.address1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.address2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.city_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.us_state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.postcode_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _impl_.phone_.ClearNonDefaultToEmpty();
  }
  _impl_.zip_plus4_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CBilling_Address::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBilling_Address)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string first_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_first_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.first_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string last_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_last_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.last_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string address1 = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_address1();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.address1");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string address2 = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_address2();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.address2");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string city = 5;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_city();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.city");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string us_state = 6;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_us_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.us_state");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_country_code();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.country_code");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional string postcode = 8;
  if (cached_has_bits & 0x00000080u) {
    const std::string& _s = this->_internal_postcode();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.postcode");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional int32 zip_plus4 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_zip_plus4(), target);
  }

  // optional string phone = 10;
  if (cached_has_bits & 0x00000100u) {
    const std::string& _s = this->_internal_phone();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CBilling_Address.phone");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBilling_Address)
  return target;
}

::size_t CBilling_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBilling_Address)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string first_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_first_name());
    }

    // optional string last_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_last_name());
    }

    // optional string address1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_address1());
    }

    // optional string address2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_address2());
    }

    // optional string city = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_city());
    }

    // optional string us_state = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_us_state());
    }

    // optional string country_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_country_code());
    }

    // optional string postcode = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_postcode());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional string phone = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_phone());
    }

    // optional int32 zip_plus4 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zip_plus4());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CBilling_Address::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CBilling_Address*>(&to_msg);
  auto& from = static_cast<const CBilling_Address&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CBilling_Address)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_first_name(from._internal_first_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_last_name(from._internal_last_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_address1(from._internal_address1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_address2(from._internal_address2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_us_state(from._internal_us_state());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_postcode(from._internal_postcode());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_phone(from._internal_phone());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.zip_plus4_ = from._impl_.zip_plus4_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CBilling_Address::CopyFrom(const CBilling_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBilling_Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CBilling_Address::InternalSwap(CBilling_Address* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.first_name_, &other->_impl_.first_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_name_, &other->_impl_.last_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address1_, &other->_impl_.address1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address2_, &other->_impl_.address2_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.city_, &other->_impl_.city_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.us_state_, &other->_impl_.us_state_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_code_, &other->_impl_.country_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.postcode_, &other->_impl_.postcode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phone_, &other->_impl_.phone_, arena);
        swap(_impl_.zip_plus4_, other->_impl_.zip_plus4_);
}

::google::protobuf::Metadata CBilling_Address::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CPackageReservationStatus::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CPackageReservationStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_._has_bits_);
};

CPackageReservationStatus::CPackageReservationStatus(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPackageReservationStatus)
}
inline PROTOBUF_NDEBUG_INLINE CPackageReservationStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CPackageReservationStatus& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        reservation_country_code_(arena, from.reservation_country_code_) {}

CPackageReservationStatus::CPackageReservationStatus(
    ::google::protobuf::Arena* arena,
    const CPackageReservationStatus& from)
    : ::google::protobuf::Message(arena) {
  CPackageReservationStatus* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packageid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packageid_),
           offsetof(Impl_, time_reserved_) -
               offsetof(Impl_, packageid_) +
               sizeof(Impl_::time_reserved_));

  // @@protoc_insertion_point(copy_constructor:CPackageReservationStatus)
}
inline PROTOBUF_NDEBUG_INLINE CPackageReservationStatus::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        reservation_country_code_(arena) {}

inline void CPackageReservationStatus::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packageid_),
           0,
           offsetof(Impl_, time_reserved_) -
               offsetof(Impl_, packageid_) +
               sizeof(Impl_::time_reserved_));
}
CPackageReservationStatus::~CPackageReservationStatus() {
  // @@protoc_insertion_point(destructor:CPackageReservationStatus)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CPackageReservationStatus::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reservation_country_code_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CPackageReservationStatus::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_._cached_size_),
              false,
          },
          &CPackageReservationStatus::MergeImpl,
          &CPackageReservationStatus::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 66, 2> CPackageReservationStatus::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CPackageReservationStatus_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CPackageReservationStatus>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 time_reserved = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.time_reserved_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.time_reserved_)}},
    // optional uint32 packageid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.packageid_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.packageid_)}},
    // optional int32 reservation_state = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.reservation_state_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.reservation_state_)}},
    // optional int32 queue_position = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.queue_position_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.queue_position_)}},
    // optional int32 total_queue_size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.total_queue_size_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.total_queue_size_)}},
    // optional string reservation_country_code = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.reservation_country_code_)}},
    // optional bool expired = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CPackageReservationStatus, _impl_.expired_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.expired_)}},
    // optional uint32 time_expires = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CPackageReservationStatus, _impl_.time_expires_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.time_expires_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 packageid = 1;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.packageid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 reservation_state = 2;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.reservation_state_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 queue_position = 3;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.queue_position_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 total_queue_size = 4;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.total_queue_size_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string reservation_country_code = 5;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.reservation_country_code_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool expired = 6;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.expired_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 time_expires = 7;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.time_expires_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 time_reserved = 8;
    {PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.time_reserved_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\31\0\0\0\0\30\0\0\0\0\0\0\0\0\0\0"
    "CPackageReservationStatus"
    "reservation_country_code"
  }},
};

PROTOBUF_NOINLINE void CPackageReservationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CPackageReservationStatus)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reservation_country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.packageid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_reserved_) -
        reinterpret_cast<char*>(&_impl_.packageid_)) + sizeof(_impl_.time_reserved_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CPackageReservationStatus::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPackageReservationStatus)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_packageid(), target);
  }

  // optional int32 reservation_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_reservation_state(), target);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_queue_position(), target);
  }

  // optional int32 total_queue_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_total_queue_size(), target);
  }

  // optional string reservation_country_code = 5;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_reservation_country_code();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CPackageReservationStatus.reservation_country_code");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional bool expired = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_expired(), target);
  }

  // optional uint32 time_expires = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_time_expires(), target);
  }

  // optional uint32 time_reserved = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_time_reserved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPackageReservationStatus)
  return target;
}

::size_t CPackageReservationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPackageReservationStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string reservation_country_code = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_reservation_country_code());
    }

    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_packageid());
    }

    // optional int32 reservation_state = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_reservation_state());
    }

    // optional int32 queue_position = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_queue_position());
    }

    // optional int32 total_queue_size = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_total_queue_size());
    }

    // optional bool expired = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional uint32 time_expires = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time_expires());
    }

    // optional uint32 time_reserved = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_time_reserved());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CPackageReservationStatus::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CPackageReservationStatus*>(&to_msg);
  auto& from = static_cast<const CPackageReservationStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CPackageReservationStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reservation_country_code(from._internal_reservation_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.packageid_ = from._impl_.packageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reservation_state_ = from._impl_.reservation_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.queue_position_ = from._impl_.queue_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_queue_size_ = from._impl_.total_queue_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.expired_ = from._impl_.expired_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.time_expires_ = from._impl_.time_expires_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.time_reserved_ = from._impl_.time_reserved_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CPackageReservationStatus::CopyFrom(const CPackageReservationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPackageReservationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CPackageReservationStatus::InternalSwap(CPackageReservationStatus* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reservation_country_code_, &other->_impl_.reservation_country_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.time_reserved_)
      + sizeof(CPackageReservationStatus::_impl_.time_reserved_)
      - PROTOBUF_FIELD_OFFSET(CPackageReservationStatus, _impl_.packageid_)>(
          reinterpret_cast<char*>(&_impl_.packageid_),
          reinterpret_cast<char*>(&other->_impl_.packageid_));
}

::google::protobuf::Metadata CPackageReservationStatus::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgKeyValuePair::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgKeyValuePair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_._has_bits_);
};

CMsgKeyValuePair::CMsgKeyValuePair(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKeyValuePair)
}
inline PROTOBUF_NDEBUG_INLINE CMsgKeyValuePair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgKeyValuePair& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        value_(arena, from.value_) {}

CMsgKeyValuePair::CMsgKeyValuePair(
    ::google::protobuf::Arena* arena,
    const CMsgKeyValuePair& from)
    : ::google::protobuf::Message(arena) {
  CMsgKeyValuePair* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CMsgKeyValuePair)
}
inline PROTOBUF_NDEBUG_INLINE CMsgKeyValuePair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        value_(arena) {}

inline void CMsgKeyValuePair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgKeyValuePair::~CMsgKeyValuePair() {
  // @@protoc_insertion_point(destructor:CMsgKeyValuePair)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgKeyValuePair::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgKeyValuePair::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_._cached_size_),
              false,
          },
          &CMsgKeyValuePair::MergeImpl,
          &CMsgKeyValuePair::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 34, 2> CMsgKeyValuePair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CMsgKeyValuePair_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgKeyValuePair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string value = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_.value_)}},
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string value = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgKeyValuePair, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\4\5\0\0\0\0\0"
    "CMsgKeyValuePair"
    "name"
    "value"
  }},
};

PROTOBUF_NOINLINE void CMsgKeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKeyValuePair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgKeyValuePair::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKeyValuePair)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgKeyValuePair.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgKeyValuePair.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKeyValuePair)
  return target;
}

::size_t CMsgKeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKeyValuePair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgKeyValuePair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgKeyValuePair*>(&to_msg);
  auto& from = static_cast<const CMsgKeyValuePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgKeyValuePair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgKeyValuePair::CopyFrom(const CMsgKeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgKeyValuePair::InternalSwap(CMsgKeyValuePair* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

::google::protobuf::Metadata CMsgKeyValuePair::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgKeyValueSet::_Internal {
 public:
};

CMsgKeyValueSet::CMsgKeyValueSet(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgKeyValueSet)
}
inline PROTOBUF_NDEBUG_INLINE CMsgKeyValueSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CMsgKeyValueSet& from_msg)
      : pairs_{visibility, arena, from.pairs_},
        _cached_size_{0} {}

CMsgKeyValueSet::CMsgKeyValueSet(
    ::google::protobuf::Arena* arena,
    const CMsgKeyValueSet& from)
    : ::google::protobuf::Message(arena) {
  CMsgKeyValueSet* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CMsgKeyValueSet)
}
inline PROTOBUF_NDEBUG_INLINE CMsgKeyValueSet::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : pairs_{visibility, arena},
        _cached_size_{0} {}

inline void CMsgKeyValueSet::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgKeyValueSet::~CMsgKeyValueSet() {
  // @@protoc_insertion_point(destructor:CMsgKeyValueSet)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CMsgKeyValueSet::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CMsgKeyValueSet::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CMsgKeyValueSet, _impl_._cached_size_),
              false,
          },
          &CMsgKeyValueSet::MergeImpl,
          &CMsgKeyValueSet::kDescriptorMethods,
          &descriptor_table_steammessages_5fbase_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CMsgKeyValueSet::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CMsgKeyValueSet_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgKeyValueSet>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CMsgKeyValuePair pairs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgKeyValueSet, _impl_.pairs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CMsgKeyValuePair pairs = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgKeyValueSet, _impl_.pairs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::CMsgKeyValuePair>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CMsgKeyValueSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgKeyValueSet)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pairs_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CMsgKeyValueSet::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgKeyValueSet)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CMsgKeyValuePair pairs = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_pairs_size());
       i < n; i++) {
    const auto& repfield = this->_internal_pairs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgKeyValueSet)
  return target;
}

::size_t CMsgKeyValueSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgKeyValueSet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .CMsgKeyValuePair pairs = 1;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->_internal_pairs()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CMsgKeyValueSet::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgKeyValueSet*>(&to_msg);
  auto& from = static_cast<const CMsgKeyValueSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgKeyValueSet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pairs()->MergeFrom(
      from._internal_pairs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgKeyValueSet::CopyFrom(const CMsgKeyValueSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgKeyValueSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgKeyValueSet::InternalSwap(CMsgKeyValueSet* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pairs_.InternalSwap(&other->_impl_.pairs_);
}

::google::protobuf::Metadata CMsgKeyValueSet::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::MessageOptions, ::_pbi::PrimitiveTypeTraits< ::int32_t >,
                            5, false>
            msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::MessageOptions, ::_pbi::PrimitiveTypeTraits< ::int32_t >,
                            5, false>
            msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::FileOptions, ::_pbi::PrimitiveTypeTraits< bool >,
                            8, false>
            force_php_generation(kForcePhpGenerationFieldNumber, false);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::FieldOptions, ::_pbi::PrimitiveTypeTraits< bool >,
                            8, false>
            php_output_always_number(kPhpOutputAlwaysNumberFieldNumber, false);
PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::_pbi::
        ExtensionIdentifier<::google::protobuf::FieldOptions, ::_pbi::PrimitiveTypeTraits< bool >,
                            8, false>
            allow_field_named_steam_id(kAllowFieldNamedSteamIdFieldNumber, false);
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_steammessages_5fbase_2eproto),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::MessageOptions::default_instance(), 50000, 5,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::MessageOptions::default_instance(), 50001, 5,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::FileOptions::default_instance(), 50000, 8,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::FieldOptions::default_instance(), 50020, 8,
            false, false),
        ::_pbi::ExtensionSet::RegisterExtension(
            &::google::protobuf::FieldOptions::default_instance(), 50024, 8,
            false, false),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
