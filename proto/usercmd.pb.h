// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: usercmd.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_usercmd_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_usercmd_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_usercmd_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_usercmd_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_usercmd_2eproto;
class CBaseUserCmdPB;
struct CBaseUserCmdPBDefaultTypeInternal;
extern CBaseUserCmdPBDefaultTypeInternal _CBaseUserCmdPB_default_instance_;
class CInButtonStatePB;
struct CInButtonStatePBDefaultTypeInternal;
extern CInButtonStatePBDefaultTypeInternal _CInButtonStatePB_default_instance_;
class CSubtickMoveStep;
struct CSubtickMoveStepDefaultTypeInternal;
extern CSubtickMoveStepDefaultTypeInternal _CSubtickMoveStep_default_instance_;
class CUserCmdBasePB;
struct CUserCmdBasePBDefaultTypeInternal;
extern CUserCmdBasePBDefaultTypeInternal _CUserCmdBasePB_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class CSubtickMoveStep final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSubtickMoveStep) */ {
 public:
  inline CSubtickMoveStep() : CSubtickMoveStep(nullptr) {}
  ~CSubtickMoveStep() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CSubtickMoveStep(
      ::google::protobuf::internal::ConstantInitialized);

  inline CSubtickMoveStep(const CSubtickMoveStep& from) : CSubtickMoveStep(nullptr, from) {}
  inline CSubtickMoveStep(CSubtickMoveStep&& from) noexcept
      : CSubtickMoveStep(nullptr, std::move(from)) {}
  inline CSubtickMoveStep& operator=(const CSubtickMoveStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSubtickMoveStep& operator=(CSubtickMoveStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSubtickMoveStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSubtickMoveStep* internal_default_instance() {
    return reinterpret_cast<const CSubtickMoveStep*>(
        &_CSubtickMoveStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CSubtickMoveStep& a, CSubtickMoveStep& b) { a.Swap(&b); }
  inline void Swap(CSubtickMoveStep* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSubtickMoveStep* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSubtickMoveStep* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CSubtickMoveStep>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CSubtickMoveStep& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CSubtickMoveStep& from) { CSubtickMoveStep::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CSubtickMoveStep* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CSubtickMoveStep"; }

 protected:
  explicit CSubtickMoveStep(::google::protobuf::Arena* arena);
  CSubtickMoveStep(::google::protobuf::Arena* arena, const CSubtickMoveStep& from);
  CSubtickMoveStep(::google::protobuf::Arena* arena, CSubtickMoveStep&& from) noexcept
      : CSubtickMoveStep(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kButtonFieldNumber = 1,
    kPressedFieldNumber = 2,
    kWhenFieldNumber = 3,
    kAnalogForwardDeltaFieldNumber = 4,
    kAnalogLeftDeltaFieldNumber = 5,
  };
  // optional uint64 button = 1;
  bool has_button() const;
  void clear_button() ;
  ::uint64_t button() const;
  void set_button(::uint64_t value);

  private:
  ::uint64_t _internal_button() const;
  void _internal_set_button(::uint64_t value);

  public:
  // optional bool pressed = 2;
  bool has_pressed() const;
  void clear_pressed() ;
  bool pressed() const;
  void set_pressed(bool value);

  private:
  bool _internal_pressed() const;
  void _internal_set_pressed(bool value);

  public:
  // optional float when = 3;
  bool has_when() const;
  void clear_when() ;
  float when() const;
  void set_when(float value);

  private:
  float _internal_when() const;
  void _internal_set_when(float value);

  public:
  // optional float analog_forward_delta = 4;
  bool has_analog_forward_delta() const;
  void clear_analog_forward_delta() ;
  float analog_forward_delta() const;
  void set_analog_forward_delta(float value);

  private:
  float _internal_analog_forward_delta() const;
  void _internal_set_analog_forward_delta(float value);

  public:
  // optional float analog_left_delta = 5;
  bool has_analog_left_delta() const;
  void clear_analog_left_delta() ;
  float analog_left_delta() const;
  void set_analog_left_delta(float value);

  private:
  float _internal_analog_left_delta() const;
  void _internal_set_analog_left_delta(float value);

  public:
  // @@protoc_insertion_point(class_scope:CSubtickMoveStep)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CSubtickMoveStep_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CSubtickMoveStep& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t button_;
    bool pressed_;
    float when_;
    float analog_forward_delta_;
    float analog_left_delta_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usercmd_2eproto;
};
// -------------------------------------------------------------------

class CInButtonStatePB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CInButtonStatePB) */ {
 public:
  inline CInButtonStatePB() : CInButtonStatePB(nullptr) {}
  ~CInButtonStatePB() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CInButtonStatePB(
      ::google::protobuf::internal::ConstantInitialized);

  inline CInButtonStatePB(const CInButtonStatePB& from) : CInButtonStatePB(nullptr, from) {}
  inline CInButtonStatePB(CInButtonStatePB&& from) noexcept
      : CInButtonStatePB(nullptr, std::move(from)) {}
  inline CInButtonStatePB& operator=(const CInButtonStatePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CInButtonStatePB& operator=(CInButtonStatePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CInButtonStatePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CInButtonStatePB* internal_default_instance() {
    return reinterpret_cast<const CInButtonStatePB*>(
        &_CInButtonStatePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CInButtonStatePB& a, CInButtonStatePB& b) { a.Swap(&b); }
  inline void Swap(CInButtonStatePB* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CInButtonStatePB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CInButtonStatePB* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CInButtonStatePB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CInButtonStatePB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CInButtonStatePB& from) { CInButtonStatePB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CInButtonStatePB* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CInButtonStatePB"; }

 protected:
  explicit CInButtonStatePB(::google::protobuf::Arena* arena);
  CInButtonStatePB(::google::protobuf::Arena* arena, const CInButtonStatePB& from);
  CInButtonStatePB(::google::protobuf::Arena* arena, CInButtonStatePB&& from) noexcept
      : CInButtonStatePB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kButtonstate1FieldNumber = 1,
    kButtonstate2FieldNumber = 2,
    kButtonstate3FieldNumber = 3,
  };
  // optional uint64 buttonstate1 = 1;
  bool has_buttonstate1() const;
  void clear_buttonstate1() ;
  ::uint64_t buttonstate1() const;
  void set_buttonstate1(::uint64_t value);

  private:
  ::uint64_t _internal_buttonstate1() const;
  void _internal_set_buttonstate1(::uint64_t value);

  public:
  // optional uint64 buttonstate2 = 2;
  bool has_buttonstate2() const;
  void clear_buttonstate2() ;
  ::uint64_t buttonstate2() const;
  void set_buttonstate2(::uint64_t value);

  private:
  ::uint64_t _internal_buttonstate2() const;
  void _internal_set_buttonstate2(::uint64_t value);

  public:
  // optional uint64 buttonstate3 = 3;
  bool has_buttonstate3() const;
  void clear_buttonstate3() ;
  ::uint64_t buttonstate3() const;
  void set_buttonstate3(::uint64_t value);

  private:
  ::uint64_t _internal_buttonstate3() const;
  void _internal_set_buttonstate3(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CInButtonStatePB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CInButtonStatePB_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CInButtonStatePB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t buttonstate1_;
    ::uint64_t buttonstate2_;
    ::uint64_t buttonstate3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usercmd_2eproto;
};
// -------------------------------------------------------------------

class CBaseUserCmdPB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CBaseUserCmdPB) */ {
 public:
  inline CBaseUserCmdPB() : CBaseUserCmdPB(nullptr) {}
  ~CBaseUserCmdPB() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CBaseUserCmdPB(
      ::google::protobuf::internal::ConstantInitialized);

  inline CBaseUserCmdPB(const CBaseUserCmdPB& from) : CBaseUserCmdPB(nullptr, from) {}
  inline CBaseUserCmdPB(CBaseUserCmdPB&& from) noexcept
      : CBaseUserCmdPB(nullptr, std::move(from)) {}
  inline CBaseUserCmdPB& operator=(const CBaseUserCmdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBaseUserCmdPB& operator=(CBaseUserCmdPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CBaseUserCmdPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBaseUserCmdPB* internal_default_instance() {
    return reinterpret_cast<const CBaseUserCmdPB*>(
        &_CBaseUserCmdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CBaseUserCmdPB& a, CBaseUserCmdPB& b) { a.Swap(&b); }
  inline void Swap(CBaseUserCmdPB* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBaseUserCmdPB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CBaseUserCmdPB* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CBaseUserCmdPB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CBaseUserCmdPB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CBaseUserCmdPB& from) { CBaseUserCmdPB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CBaseUserCmdPB* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CBaseUserCmdPB"; }

 protected:
  explicit CBaseUserCmdPB(::google::protobuf::Arena* arena);
  CBaseUserCmdPB(::google::protobuf::Arena* arena, const CBaseUserCmdPB& from);
  CBaseUserCmdPB(::google::protobuf::Arena* arena, CBaseUserCmdPB&& from) noexcept
      : CBaseUserCmdPB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubtickMovesFieldNumber = 18,
    kMoveCrcFieldNumber = 19,
    kButtonsPbFieldNumber = 3,
    kViewanglesFieldNumber = 4,
    kLegacyCommandNumberFieldNumber = 1,
    kClientTickFieldNumber = 2,
    kForwardmoveFieldNumber = 5,
    kLeftmoveFieldNumber = 6,
    kUpmoveFieldNumber = 7,
    kImpulseFieldNumber = 8,
    kWeaponselectFieldNumber = 9,
    kRandomSeedFieldNumber = 10,
    kMousedxFieldNumber = 11,
    kMousedyFieldNumber = 12,
    kConsumedServerAngleChangesFieldNumber = 20,
    kCmdFlagsFieldNumber = 21,
    kPawnEntityHandleFieldNumber = 14,
  };
  // repeated .CSubtickMoveStep subtick_moves = 18;
  int subtick_moves_size() const;
  private:
  int _internal_subtick_moves_size() const;

  public:
  void clear_subtick_moves() ;
  ::CSubtickMoveStep* mutable_subtick_moves(int index);
  ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>* mutable_subtick_moves();

  private:
  const ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>& _internal_subtick_moves() const;
  ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>* _internal_mutable_subtick_moves();
  public:
  const ::CSubtickMoveStep& subtick_moves(int index) const;
  ::CSubtickMoveStep* add_subtick_moves();
  const ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>& subtick_moves() const;
  // optional bytes move_crc = 19;
  bool has_move_crc() const;
  void clear_move_crc() ;
  const std::string& move_crc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_move_crc(Arg_&& arg, Args_... args);
  std::string* mutable_move_crc();
  PROTOBUF_NODISCARD std::string* release_move_crc();
  void set_allocated_move_crc(std::string* value);

  private:
  const std::string& _internal_move_crc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_move_crc(
      const std::string& value);
  std::string* _internal_mutable_move_crc();

  public:
  // optional .CInButtonStatePB buttons_pb = 3;
  bool has_buttons_pb() const;
  void clear_buttons_pb() ;
  const ::CInButtonStatePB& buttons_pb() const;
  PROTOBUF_NODISCARD ::CInButtonStatePB* release_buttons_pb();
  ::CInButtonStatePB* mutable_buttons_pb();
  void set_allocated_buttons_pb(::CInButtonStatePB* value);
  void unsafe_arena_set_allocated_buttons_pb(::CInButtonStatePB* value);
  ::CInButtonStatePB* unsafe_arena_release_buttons_pb();

  private:
  const ::CInButtonStatePB& _internal_buttons_pb() const;
  ::CInButtonStatePB* _internal_mutable_buttons_pb();

  public:
  // optional .CMsgQAngle viewangles = 4;
  bool has_viewangles() const;
  void clear_viewangles() ;
  const ::CMsgQAngle& viewangles() const;
  PROTOBUF_NODISCARD ::CMsgQAngle* release_viewangles();
  ::CMsgQAngle* mutable_viewangles();
  void set_allocated_viewangles(::CMsgQAngle* value);
  void unsafe_arena_set_allocated_viewangles(::CMsgQAngle* value);
  ::CMsgQAngle* unsafe_arena_release_viewangles();

  private:
  const ::CMsgQAngle& _internal_viewangles() const;
  ::CMsgQAngle* _internal_mutable_viewangles();

  public:
  // optional int32 legacy_command_number = 1;
  bool has_legacy_command_number() const;
  void clear_legacy_command_number() ;
  ::int32_t legacy_command_number() const;
  void set_legacy_command_number(::int32_t value);

  private:
  ::int32_t _internal_legacy_command_number() const;
  void _internal_set_legacy_command_number(::int32_t value);

  public:
  // optional int32 client_tick = 2;
  bool has_client_tick() const;
  void clear_client_tick() ;
  ::int32_t client_tick() const;
  void set_client_tick(::int32_t value);

  private:
  ::int32_t _internal_client_tick() const;
  void _internal_set_client_tick(::int32_t value);

  public:
  // optional float forwardmove = 5;
  bool has_forwardmove() const;
  void clear_forwardmove() ;
  float forwardmove() const;
  void set_forwardmove(float value);

  private:
  float _internal_forwardmove() const;
  void _internal_set_forwardmove(float value);

  public:
  // optional float leftmove = 6;
  bool has_leftmove() const;
  void clear_leftmove() ;
  float leftmove() const;
  void set_leftmove(float value);

  private:
  float _internal_leftmove() const;
  void _internal_set_leftmove(float value);

  public:
  // optional float upmove = 7;
  bool has_upmove() const;
  void clear_upmove() ;
  float upmove() const;
  void set_upmove(float value);

  private:
  float _internal_upmove() const;
  void _internal_set_upmove(float value);

  public:
  // optional int32 impulse = 8;
  bool has_impulse() const;
  void clear_impulse() ;
  ::int32_t impulse() const;
  void set_impulse(::int32_t value);

  private:
  ::int32_t _internal_impulse() const;
  void _internal_set_impulse(::int32_t value);

  public:
  // optional int32 weaponselect = 9;
  bool has_weaponselect() const;
  void clear_weaponselect() ;
  ::int32_t weaponselect() const;
  void set_weaponselect(::int32_t value);

  private:
  ::int32_t _internal_weaponselect() const;
  void _internal_set_weaponselect(::int32_t value);

  public:
  // optional int32 random_seed = 10;
  bool has_random_seed() const;
  void clear_random_seed() ;
  ::int32_t random_seed() const;
  void set_random_seed(::int32_t value);

  private:
  ::int32_t _internal_random_seed() const;
  void _internal_set_random_seed(::int32_t value);

  public:
  // optional int32 mousedx = 11;
  bool has_mousedx() const;
  void clear_mousedx() ;
  ::int32_t mousedx() const;
  void set_mousedx(::int32_t value);

  private:
  ::int32_t _internal_mousedx() const;
  void _internal_set_mousedx(::int32_t value);

  public:
  // optional int32 mousedy = 12;
  bool has_mousedy() const;
  void clear_mousedy() ;
  ::int32_t mousedy() const;
  void set_mousedy(::int32_t value);

  private:
  ::int32_t _internal_mousedy() const;
  void _internal_set_mousedy(::int32_t value);

  public:
  // optional uint32 consumed_server_angle_changes = 20;
  bool has_consumed_server_angle_changes() const;
  void clear_consumed_server_angle_changes() ;
  ::uint32_t consumed_server_angle_changes() const;
  void set_consumed_server_angle_changes(::uint32_t value);

  private:
  ::uint32_t _internal_consumed_server_angle_changes() const;
  void _internal_set_consumed_server_angle_changes(::uint32_t value);

  public:
  // optional int32 cmd_flags = 21;
  bool has_cmd_flags() const;
  void clear_cmd_flags() ;
  ::int32_t cmd_flags() const;
  void set_cmd_flags(::int32_t value);

  private:
  ::int32_t _internal_cmd_flags() const;
  void _internal_set_cmd_flags(::int32_t value);

  public:
  // optional uint32 pawn_entity_handle = 14 [default = 16777215];
  bool has_pawn_entity_handle() const;
  void clear_pawn_entity_handle() ;
  ::uint32_t pawn_entity_handle() const;
  void set_pawn_entity_handle(::uint32_t value);

  private:
  ::uint32_t _internal_pawn_entity_handle() const;
  void _internal_set_pawn_entity_handle(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CBaseUserCmdPB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CBaseUserCmdPB_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CBaseUserCmdPB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CSubtickMoveStep > subtick_moves_;
    ::google::protobuf::internal::ArenaStringPtr move_crc_;
    ::CInButtonStatePB* buttons_pb_;
    ::CMsgQAngle* viewangles_;
    ::int32_t legacy_command_number_;
    ::int32_t client_tick_;
    float forwardmove_;
    float leftmove_;
    float upmove_;
    ::int32_t impulse_;
    ::int32_t weaponselect_;
    ::int32_t random_seed_;
    ::int32_t mousedx_;
    ::int32_t mousedy_;
    ::uint32_t consumed_server_angle_changes_;
    ::int32_t cmd_flags_;
    ::uint32_t pawn_entity_handle_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usercmd_2eproto;
};
// -------------------------------------------------------------------

class CUserCmdBasePB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CUserCmdBasePB) */ {
 public:
  inline CUserCmdBasePB() : CUserCmdBasePB(nullptr) {}
  ~CUserCmdBasePB() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CUserCmdBasePB(
      ::google::protobuf::internal::ConstantInitialized);

  inline CUserCmdBasePB(const CUserCmdBasePB& from) : CUserCmdBasePB(nullptr, from) {}
  inline CUserCmdBasePB(CUserCmdBasePB&& from) noexcept
      : CUserCmdBasePB(nullptr, std::move(from)) {}
  inline CUserCmdBasePB& operator=(const CUserCmdBasePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUserCmdBasePB& operator=(CUserCmdBasePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CUserCmdBasePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUserCmdBasePB* internal_default_instance() {
    return reinterpret_cast<const CUserCmdBasePB*>(
        &_CUserCmdBasePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CUserCmdBasePB& a, CUserCmdBasePB& b) { a.Swap(&b); }
  inline void Swap(CUserCmdBasePB* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUserCmdBasePB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CUserCmdBasePB* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CUserCmdBasePB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CUserCmdBasePB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CUserCmdBasePB& from) { CUserCmdBasePB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CUserCmdBasePB* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CUserCmdBasePB"; }

 protected:
  explicit CUserCmdBasePB(::google::protobuf::Arena* arena);
  CUserCmdBasePB(::google::protobuf::Arena* arena, const CUserCmdBasePB& from);
  CUserCmdBasePB(::google::protobuf::Arena* arena, CUserCmdBasePB&& from) noexcept
      : CUserCmdBasePB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBaseFieldNumber = 1,
  };
  // optional .CBaseUserCmdPB base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::CBaseUserCmdPB& base() const;
  PROTOBUF_NODISCARD ::CBaseUserCmdPB* release_base();
  ::CBaseUserCmdPB* mutable_base();
  void set_allocated_base(::CBaseUserCmdPB* value);
  void unsafe_arena_set_allocated_base(::CBaseUserCmdPB* value);
  ::CBaseUserCmdPB* unsafe_arena_release_base();

  private:
  const ::CBaseUserCmdPB& _internal_base() const;
  ::CBaseUserCmdPB* _internal_mutable_base();

  public:
  // @@protoc_insertion_point(class_scope:CUserCmdBasePB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CUserCmdBasePB_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CUserCmdBasePB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::CBaseUserCmdPB* base_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_usercmd_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CInButtonStatePB

// optional uint64 buttonstate1 = 1;
inline bool CInButtonStatePB::has_buttonstate1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CInButtonStatePB::clear_buttonstate1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CInButtonStatePB::buttonstate1() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate1)
  return _internal_buttonstate1();
}
inline void CInButtonStatePB::set_buttonstate1(::uint64_t value) {
  _internal_set_buttonstate1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate1)
}
inline ::uint64_t CInButtonStatePB::_internal_buttonstate1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buttonstate1_;
}
inline void CInButtonStatePB::_internal_set_buttonstate1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate1_ = value;
}

// optional uint64 buttonstate2 = 2;
inline bool CInButtonStatePB::has_buttonstate2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CInButtonStatePB::clear_buttonstate2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t CInButtonStatePB::buttonstate2() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate2)
  return _internal_buttonstate2();
}
inline void CInButtonStatePB::set_buttonstate2(::uint64_t value) {
  _internal_set_buttonstate2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate2)
}
inline ::uint64_t CInButtonStatePB::_internal_buttonstate2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buttonstate2_;
}
inline void CInButtonStatePB::_internal_set_buttonstate2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate2_ = value;
}

// optional uint64 buttonstate3 = 3;
inline bool CInButtonStatePB::has_buttonstate3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CInButtonStatePB::clear_buttonstate3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t CInButtonStatePB::buttonstate3() const {
  // @@protoc_insertion_point(field_get:CInButtonStatePB.buttonstate3)
  return _internal_buttonstate3();
}
inline void CInButtonStatePB::set_buttonstate3(::uint64_t value) {
  _internal_set_buttonstate3(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CInButtonStatePB.buttonstate3)
}
inline ::uint64_t CInButtonStatePB::_internal_buttonstate3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buttonstate3_;
}
inline void CInButtonStatePB::_internal_set_buttonstate3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buttonstate3_ = value;
}

// -------------------------------------------------------------------

// CSubtickMoveStep

// optional uint64 button = 1;
inline bool CSubtickMoveStep::has_button() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CSubtickMoveStep::clear_button() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t CSubtickMoveStep::button() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.button)
  return _internal_button();
}
inline void CSubtickMoveStep::set_button(::uint64_t value) {
  _internal_set_button(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.button)
}
inline ::uint64_t CSubtickMoveStep::_internal_button() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.button_;
}
inline void CSubtickMoveStep::_internal_set_button(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.button_ = value;
}

// optional bool pressed = 2;
inline bool CSubtickMoveStep::has_pressed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CSubtickMoveStep::clear_pressed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressed_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CSubtickMoveStep::pressed() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.pressed)
  return _internal_pressed();
}
inline void CSubtickMoveStep::set_pressed(bool value) {
  _internal_set_pressed(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.pressed)
}
inline bool CSubtickMoveStep::_internal_pressed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pressed_;
}
inline void CSubtickMoveStep::_internal_set_pressed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pressed_ = value;
}

// optional float when = 3;
inline bool CSubtickMoveStep::has_when() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CSubtickMoveStep::clear_when() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.when_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CSubtickMoveStep::when() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.when)
  return _internal_when();
}
inline void CSubtickMoveStep::set_when(float value) {
  _internal_set_when(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.when)
}
inline float CSubtickMoveStep::_internal_when() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.when_;
}
inline void CSubtickMoveStep::_internal_set_when(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.when_ = value;
}

// optional float analog_forward_delta = 4;
inline bool CSubtickMoveStep::has_analog_forward_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CSubtickMoveStep::clear_analog_forward_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_forward_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CSubtickMoveStep::analog_forward_delta() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.analog_forward_delta)
  return _internal_analog_forward_delta();
}
inline void CSubtickMoveStep::set_analog_forward_delta(float value) {
  _internal_set_analog_forward_delta(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.analog_forward_delta)
}
inline float CSubtickMoveStep::_internal_analog_forward_delta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analog_forward_delta_;
}
inline void CSubtickMoveStep::_internal_set_analog_forward_delta(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_forward_delta_ = value;
}

// optional float analog_left_delta = 5;
inline bool CSubtickMoveStep::has_analog_left_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CSubtickMoveStep::clear_analog_left_delta() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_left_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CSubtickMoveStep::analog_left_delta() const {
  // @@protoc_insertion_point(field_get:CSubtickMoveStep.analog_left_delta)
  return _internal_analog_left_delta();
}
inline void CSubtickMoveStep::set_analog_left_delta(float value) {
  _internal_set_analog_left_delta(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CSubtickMoveStep.analog_left_delta)
}
inline float CSubtickMoveStep::_internal_analog_left_delta() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.analog_left_delta_;
}
inline void CSubtickMoveStep::_internal_set_analog_left_delta(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.analog_left_delta_ = value;
}

// -------------------------------------------------------------------

// CBaseUserCmdPB

// optional int32 legacy_command_number = 1;
inline bool CBaseUserCmdPB::has_legacy_command_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_legacy_command_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.legacy_command_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CBaseUserCmdPB::legacy_command_number() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.legacy_command_number)
  return _internal_legacy_command_number();
}
inline void CBaseUserCmdPB::set_legacy_command_number(::int32_t value) {
  _internal_set_legacy_command_number(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.legacy_command_number)
}
inline ::int32_t CBaseUserCmdPB::_internal_legacy_command_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.legacy_command_number_;
}
inline void CBaseUserCmdPB::_internal_set_legacy_command_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.legacy_command_number_ = value;
}

// optional int32 client_tick = 2;
inline bool CBaseUserCmdPB::has_client_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_client_tick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_tick_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CBaseUserCmdPB::client_tick() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.client_tick)
  return _internal_client_tick();
}
inline void CBaseUserCmdPB::set_client_tick(::int32_t value) {
  _internal_set_client_tick(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.client_tick)
}
inline ::int32_t CBaseUserCmdPB::_internal_client_tick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.client_tick_;
}
inline void CBaseUserCmdPB::_internal_set_client_tick(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.client_tick_ = value;
}

// optional .CInButtonStatePB buttons_pb = 3;
inline bool CBaseUserCmdPB::has_buttons_pb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buttons_pb_ != nullptr);
  return value;
}
inline void CBaseUserCmdPB::clear_buttons_pb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.buttons_pb_ != nullptr) _impl_.buttons_pb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CInButtonStatePB& CBaseUserCmdPB::_internal_buttons_pb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CInButtonStatePB* p = _impl_.buttons_pb_;
  return p != nullptr ? *p : reinterpret_cast<const ::CInButtonStatePB&>(::_CInButtonStatePB_default_instance_);
}
inline const ::CInButtonStatePB& CBaseUserCmdPB::buttons_pb() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.buttons_pb)
  return _internal_buttons_pb();
}
inline void CBaseUserCmdPB::unsafe_arena_set_allocated_buttons_pb(::CInButtonStatePB* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.buttons_pb_);
  }
  _impl_.buttons_pb_ = reinterpret_cast<::CInButtonStatePB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBaseUserCmdPB.buttons_pb)
}
inline ::CInButtonStatePB* CBaseUserCmdPB::release_buttons_pb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CInButtonStatePB* released = _impl_.buttons_pb_;
  _impl_.buttons_pb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::unsafe_arena_release_buttons_pb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.buttons_pb)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CInButtonStatePB* temp = _impl_.buttons_pb_;
  _impl_.buttons_pb_ = nullptr;
  return temp;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::_internal_mutable_buttons_pb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.buttons_pb_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CInButtonStatePB>(GetArena());
    _impl_.buttons_pb_ = reinterpret_cast<::CInButtonStatePB*>(p);
  }
  return _impl_.buttons_pb_;
}
inline ::CInButtonStatePB* CBaseUserCmdPB::mutable_buttons_pb() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::CInButtonStatePB* _msg = _internal_mutable_buttons_pb();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.buttons_pb)
  return _msg;
}
inline void CBaseUserCmdPB::set_allocated_buttons_pb(::CInButtonStatePB* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.buttons_pb_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.buttons_pb_ = reinterpret_cast<::CInButtonStatePB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.buttons_pb)
}

// optional .CMsgQAngle viewangles = 4;
inline bool CBaseUserCmdPB::has_viewangles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewangles_ != nullptr);
  return value;
}
inline const ::CMsgQAngle& CBaseUserCmdPB::_internal_viewangles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgQAngle* p = _impl_.viewangles_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CBaseUserCmdPB::viewangles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.viewangles)
  return _internal_viewangles();
}
inline void CBaseUserCmdPB::unsafe_arena_set_allocated_viewangles(::CMsgQAngle* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.viewangles_);
  }
  _impl_.viewangles_ = reinterpret_cast<::CMsgQAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBaseUserCmdPB.viewangles)
}
inline ::CMsgQAngle* CBaseUserCmdPB::release_viewangles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgQAngle* released = _impl_.viewangles_;
  _impl_.viewangles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CMsgQAngle* CBaseUserCmdPB::unsafe_arena_release_viewangles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.viewangles)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgQAngle* temp = _impl_.viewangles_;
  _impl_.viewangles_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CBaseUserCmdPB::_internal_mutable_viewangles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.viewangles_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgQAngle>(GetArena());
    _impl_.viewangles_ = reinterpret_cast<::CMsgQAngle*>(p);
  }
  return _impl_.viewangles_;
}
inline ::CMsgQAngle* CBaseUserCmdPB::mutable_viewangles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::CMsgQAngle* _msg = _internal_mutable_viewangles();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.viewangles)
  return _msg;
}
inline void CBaseUserCmdPB::set_allocated_viewangles(::CMsgQAngle* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.viewangles_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.viewangles_ = reinterpret_cast<::CMsgQAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.viewangles)
}

// optional float forwardmove = 5;
inline bool CBaseUserCmdPB::has_forwardmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_forwardmove() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forwardmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CBaseUserCmdPB::forwardmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.forwardmove)
  return _internal_forwardmove();
}
inline void CBaseUserCmdPB::set_forwardmove(float value) {
  _internal_set_forwardmove(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.forwardmove)
}
inline float CBaseUserCmdPB::_internal_forwardmove() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.forwardmove_;
}
inline void CBaseUserCmdPB::_internal_set_forwardmove(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.forwardmove_ = value;
}

// optional float leftmove = 6;
inline bool CBaseUserCmdPB::has_leftmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_leftmove() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leftmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CBaseUserCmdPB::leftmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.leftmove)
  return _internal_leftmove();
}
inline void CBaseUserCmdPB::set_leftmove(float value) {
  _internal_set_leftmove(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.leftmove)
}
inline float CBaseUserCmdPB::_internal_leftmove() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leftmove_;
}
inline void CBaseUserCmdPB::_internal_set_leftmove(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leftmove_ = value;
}

// optional float upmove = 7;
inline bool CBaseUserCmdPB::has_upmove() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_upmove() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upmove_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CBaseUserCmdPB::upmove() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.upmove)
  return _internal_upmove();
}
inline void CBaseUserCmdPB::set_upmove(float value) {
  _internal_set_upmove(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.upmove)
}
inline float CBaseUserCmdPB::_internal_upmove() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.upmove_;
}
inline void CBaseUserCmdPB::_internal_set_upmove(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.upmove_ = value;
}

// optional int32 impulse = 8;
inline bool CBaseUserCmdPB::has_impulse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_impulse() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.impulse_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t CBaseUserCmdPB::impulse() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.impulse)
  return _internal_impulse();
}
inline void CBaseUserCmdPB::set_impulse(::int32_t value) {
  _internal_set_impulse(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.impulse)
}
inline ::int32_t CBaseUserCmdPB::_internal_impulse() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.impulse_;
}
inline void CBaseUserCmdPB::_internal_set_impulse(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.impulse_ = value;
}

// optional int32 weaponselect = 9;
inline bool CBaseUserCmdPB::has_weaponselect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_weaponselect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weaponselect_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t CBaseUserCmdPB::weaponselect() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.weaponselect)
  return _internal_weaponselect();
}
inline void CBaseUserCmdPB::set_weaponselect(::int32_t value) {
  _internal_set_weaponselect(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.weaponselect)
}
inline ::int32_t CBaseUserCmdPB::_internal_weaponselect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.weaponselect_;
}
inline void CBaseUserCmdPB::_internal_set_weaponselect(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.weaponselect_ = value;
}

// optional int32 random_seed = 10;
inline bool CBaseUserCmdPB::has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_random_seed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.random_seed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t CBaseUserCmdPB::random_seed() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.random_seed)
  return _internal_random_seed();
}
inline void CBaseUserCmdPB::set_random_seed(::int32_t value) {
  _internal_set_random_seed(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.random_seed)
}
inline ::int32_t CBaseUserCmdPB::_internal_random_seed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.random_seed_;
}
inline void CBaseUserCmdPB::_internal_set_random_seed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.random_seed_ = value;
}

// optional int32 mousedx = 11;
inline bool CBaseUserCmdPB::has_mousedx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_mousedx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mousedx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t CBaseUserCmdPB::mousedx() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.mousedx)
  return _internal_mousedx();
}
inline void CBaseUserCmdPB::set_mousedx(::int32_t value) {
  _internal_set_mousedx(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.mousedx)
}
inline ::int32_t CBaseUserCmdPB::_internal_mousedx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mousedx_;
}
inline void CBaseUserCmdPB::_internal_set_mousedx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mousedx_ = value;
}

// optional int32 mousedy = 12;
inline bool CBaseUserCmdPB::has_mousedy() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_mousedy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mousedy_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t CBaseUserCmdPB::mousedy() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.mousedy)
  return _internal_mousedy();
}
inline void CBaseUserCmdPB::set_mousedy(::int32_t value) {
  _internal_set_mousedy(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.mousedy)
}
inline ::int32_t CBaseUserCmdPB::_internal_mousedy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mousedy_;
}
inline void CBaseUserCmdPB::_internal_set_mousedy(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mousedy_ = value;
}

// optional uint32 pawn_entity_handle = 14 [default = 16777215];
inline bool CBaseUserCmdPB::has_pawn_entity_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_pawn_entity_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pawn_entity_handle_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t CBaseUserCmdPB::pawn_entity_handle() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.pawn_entity_handle)
  return _internal_pawn_entity_handle();
}
inline void CBaseUserCmdPB::set_pawn_entity_handle(::uint32_t value) {
  _internal_set_pawn_entity_handle(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.pawn_entity_handle)
}
inline ::uint32_t CBaseUserCmdPB::_internal_pawn_entity_handle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pawn_entity_handle_;
}
inline void CBaseUserCmdPB::_internal_set_pawn_entity_handle(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pawn_entity_handle_ = value;
}

// repeated .CSubtickMoveStep subtick_moves = 18;
inline int CBaseUserCmdPB::_internal_subtick_moves_size() const {
  return _internal_subtick_moves().size();
}
inline int CBaseUserCmdPB::subtick_moves_size() const {
  return _internal_subtick_moves_size();
}
inline void CBaseUserCmdPB::clear_subtick_moves() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subtick_moves_.Clear();
}
inline ::CSubtickMoveStep* CBaseUserCmdPB::mutable_subtick_moves(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.subtick_moves)
  return _internal_mutable_subtick_moves()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>* CBaseUserCmdPB::mutable_subtick_moves()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CBaseUserCmdPB.subtick_moves)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_subtick_moves();
}
inline const ::CSubtickMoveStep& CBaseUserCmdPB::subtick_moves(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.subtick_moves)
  return _internal_subtick_moves().Get(index);
}
inline ::CSubtickMoveStep* CBaseUserCmdPB::add_subtick_moves() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::CSubtickMoveStep* _add = _internal_mutable_subtick_moves()->Add();
  // @@protoc_insertion_point(field_add:CBaseUserCmdPB.subtick_moves)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>& CBaseUserCmdPB::subtick_moves() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CBaseUserCmdPB.subtick_moves)
  return _internal_subtick_moves();
}
inline const ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>&
CBaseUserCmdPB::_internal_subtick_moves() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subtick_moves_;
}
inline ::google::protobuf::RepeatedPtrField<::CSubtickMoveStep>*
CBaseUserCmdPB::_internal_mutable_subtick_moves() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.subtick_moves_;
}

// optional bytes move_crc = 19;
inline bool CBaseUserCmdPB::has_move_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_move_crc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_crc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBaseUserCmdPB::move_crc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.move_crc)
  return _internal_move_crc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CBaseUserCmdPB::set_move_crc(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.move_crc_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.move_crc)
}
inline std::string* CBaseUserCmdPB::mutable_move_crc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_move_crc();
  // @@protoc_insertion_point(field_mutable:CBaseUserCmdPB.move_crc)
  return _s;
}
inline const std::string& CBaseUserCmdPB::_internal_move_crc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_crc_.Get();
}
inline void CBaseUserCmdPB::_internal_set_move_crc(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.move_crc_.Set(value, GetArena());
}
inline std::string* CBaseUserCmdPB::_internal_mutable_move_crc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.move_crc_.Mutable( GetArena());
}
inline std::string* CBaseUserCmdPB::release_move_crc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CBaseUserCmdPB.move_crc)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.move_crc_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.move_crc_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CBaseUserCmdPB::set_allocated_move_crc(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.move_crc_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.move_crc_.IsDefault()) {
          _impl_.move_crc_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CBaseUserCmdPB.move_crc)
}

// optional uint32 consumed_server_angle_changes = 20;
inline bool CBaseUserCmdPB::has_consumed_server_angle_changes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_consumed_server_angle_changes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consumed_server_angle_changes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t CBaseUserCmdPB::consumed_server_angle_changes() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.consumed_server_angle_changes)
  return _internal_consumed_server_angle_changes();
}
inline void CBaseUserCmdPB::set_consumed_server_angle_changes(::uint32_t value) {
  _internal_set_consumed_server_angle_changes(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.consumed_server_angle_changes)
}
inline ::uint32_t CBaseUserCmdPB::_internal_consumed_server_angle_changes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.consumed_server_angle_changes_;
}
inline void CBaseUserCmdPB::_internal_set_consumed_server_angle_changes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.consumed_server_angle_changes_ = value;
}

// optional int32 cmd_flags = 21;
inline bool CBaseUserCmdPB::has_cmd_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void CBaseUserCmdPB::clear_cmd_flags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t CBaseUserCmdPB::cmd_flags() const {
  // @@protoc_insertion_point(field_get:CBaseUserCmdPB.cmd_flags)
  return _internal_cmd_flags();
}
inline void CBaseUserCmdPB::set_cmd_flags(::int32_t value) {
  _internal_set_cmd_flags(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:CBaseUserCmdPB.cmd_flags)
}
inline ::int32_t CBaseUserCmdPB::_internal_cmd_flags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cmd_flags_;
}
inline void CBaseUserCmdPB::_internal_set_cmd_flags(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cmd_flags_ = value;
}

// -------------------------------------------------------------------

// CUserCmdBasePB

// optional .CBaseUserCmdPB base = 1;
inline bool CUserCmdBasePB::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline void CUserCmdBasePB::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CBaseUserCmdPB& CUserCmdBasePB::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CBaseUserCmdPB* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBaseUserCmdPB&>(::_CBaseUserCmdPB_default_instance_);
}
inline const ::CBaseUserCmdPB& CUserCmdBasePB::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CUserCmdBasePB.base)
  return _internal_base();
}
inline void CUserCmdBasePB::unsafe_arena_set_allocated_base(::CBaseUserCmdPB* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CUserCmdBasePB.base)
}
inline ::CBaseUserCmdPB* CUserCmdBasePB::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* released = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CBaseUserCmdPB* CUserCmdBasePB::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CUserCmdBasePB.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::CBaseUserCmdPB* CUserCmdBasePB::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CBaseUserCmdPB>(GetArena());
    _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(p);
  }
  return _impl_.base_;
}
inline ::CBaseUserCmdPB* CUserCmdBasePB::mutable_base() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CBaseUserCmdPB* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CUserCmdBasePB.base)
  return _msg;
}
inline void CUserCmdBasePB::set_allocated_base(::CBaseUserCmdPB* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CUserCmdBasePB.base)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_usercmd_2eproto_2epb_2eh
